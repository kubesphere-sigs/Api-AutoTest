- - 1
  - RabbitMQ
  - "image:\n  rabbitmq:\n    repository: rabbitmq\n    tag: 3.8.1-alpine\n    pullPolicy:\
    \ IfNotPresent\nimagePullSecrets: []\nnameOverride: ''\nfullnameOverride: ''\n\
    persistence:\n  size: 5Gi\nextraPlugins: []\nextraConfigurations: |-\n  ## Number\
    \ of Erlang processes that will accept connections for the TCP\n  ## and TLS listeners.\n\
    \  ##\n  # num_acceptors.tcp = 10\n  # num_acceptors.ssl = 10\nadvancedConfigurations:\
    \ |-\n  [\n    {rabbitmq_auth_backend_ldap, [\n      %% Authorisation\n    ]}\n\
    \  ].\ndefaultUsername: admin\ndefaultPassword: password\nservice:\n  type: ClusterIP\n\
    resources: {}\nnodeSelector: {}\ntolerations: []\naffinity: {}"
  - 应用商店
  - 从应用商店部署RabbitMQ
  - CRITICAL
  - active
- - 2
  - Harbor
  - "expose:\n  type: ingress\n  tls:\n    enabled: true\n    secretName: ''\n   \
    \ notarySecretName: ''\n    commonName: ''\n  ingress:\n    hosts:\n      core:\
    \ core.harbor.domain\n      notary: notary.harbor.domain\n    controller: default\n\
    \    annotations:\n      ingress.kubernetes.io/ssl-redirect: 'true'\n      ingress.kubernetes.io/proxy-body-size:\
    \ '0'\n      nginx.ingress.kubernetes.io/ssl-redirect: 'true'\n      nginx.ingress.kubernetes.io/proxy-body-size:\
    \ '0'\n  clusterIP:\n    name: harbor\n    ports:\n      httpPort: 80\n      httpsPort:\
    \ 443\n      notaryPort: 4443\n  nodePort:\n    name: harbor\n    ports:\n   \
    \   http:\n        port: 80\n        nodePort: 30002\n      https:\n        port:\
    \ 443\n        nodePort: 30003\n      notary:\n        port: 4443\n        nodePort:\
    \ 30004\n  loadBalancer:\n    name: harbor\n    IP: ''\n    ports:\n      httpPort:\
    \ 80\n      httpsPort: 443\n      notaryPort: 4443\n    annotations: {}\n    sourceRanges:\
    \ []\nexternalURL: 'https://core.harbor.domain'\ninternalTLS:\n  enabled: false\n\
    \  certSource: auto\n  trustCa: ''\n  core:\n    secretName: ''\n    crt: ''\n\
    \    key: ''\n  jobservice:\n    secretName: ''\n    crt: ''\n    key: ''\n  registry:\n\
    \    secretName: ''\n    crt: ''\n    key: ''\n  portal:\n    secretName: ''\n\
    \    crt: ''\n    key: ''\n  chartmuseum:\n    secretName: ''\n    crt: ''\n \
    \   key: ''\n  clair:\n    secretName: ''\n    crt: ''\n    key: ''\n  trivy:\n\
    \    secretName: ''\n    crt: ''\n    key: ''\npersistence:\n  enabled: true\n\
    \  resourcePolicy: keep\n  persistentVolumeClaim:\n    registry:\n      existingClaim:\
    \ ''\n      storageClass: ''\n      subPath: ''\n      accessMode: ReadWriteOnce\n\
    \      size: 5Gi\n    chartmuseum:\n      existingClaim: ''\n      storageClass:\
    \ ''\n      subPath: ''\n      accessMode: ReadWriteOnce\n      size: 5Gi\n  \
    \  jobservice:\n      existingClaim: ''\n      storageClass: ''\n      subPath:\
    \ ''\n      accessMode: ReadWriteOnce\n      size: 1Gi\n    database:\n      existingClaim:\
    \ ''\n      storageClass: ''\n      subPath: ''\n      accessMode: ReadWriteOnce\n\
    \      size: 1Gi\n    redis:\n      existingClaim: ''\n      storageClass: ''\n\
    \      subPath: ''\n      accessMode: ReadWriteOnce\n      size: 1Gi\n    trivy:\n\
    \      existingClaim: ''\n      storageClass: ''\n      subPath: ''\n      accessMode:\
    \ ReadWriteOnce\n      size: 5Gi\n  imageChartStorage:\n    disableredirect: false\n\
    \    type: filesystem\n    filesystem:\n      rootdirectory: /storage\n    azure:\n\
    \      accountname: accountname\n      accountkey: base64encodedaccountkey\n \
    \     container: containername\n    gcs:\n      bucket: bucketname\n      encodedkey:\
    \ base64-encoded-json-key-file\n    s3:\n      region: us-west-1\n      bucket:\
    \ bucketname\n    swift:\n      authurl: 'https://storage.myprovider.com/v3/auth'\n\
    \      username: username\n      password: password\n      container: containername\n\
    \    oss:\n      accesskeyid: accesskeyid\n      accesskeysecret: accesskeysecret\n\
    \      region: regionname\n      bucket: bucketname\nimagePullPolicy: IfNotPresent\n\
    imagePullSecrets: null\nupdateStrategy:\n  type: RollingUpdate\nlogLevel: info\n\
    harborAdminPassword: Harbor12345\nsecretKey: not-a-secure-key\nproxy:\n  httpProxy:\
    \ null\n  httpsProxy: null\n  noProxy: '127.0.0.1,localhost,.local,.internal'\n\
    \  components:\n    - core\n    - jobservice\n    - clair\nnginx:\n  image:\n\
    \    repository: goharbor/nginx-photon\n    tag: v2.0.0\n  replicas: 1\n  nodeSelector:\
    \ {}\n  tolerations: []\n  affinity: {}\n  podAnnotations: {}\nportal:\n  image:\n\
    \    repository: goharbor/harbor-portal\n    tag: v2.0.0\n  replicas: 1\n  nodeSelector:\
    \ {}\n  tolerations: []\n  affinity: {}\n  podAnnotations: {}\ncore:\n  image:\n\
    \    repository: goharbor/harbor-core\n    tag: v2.0.0\n  replicas: 1\n  livenessProbe:\n\
    \    initialDelaySeconds: 300\n  nodeSelector: {}\n  tolerations: []\n  affinity:\
    \ {}\n  podAnnotations: {}\n  secret: ''\n  secretName: ''\n  xsrfKey: ''\njobservice:\n\
    \  image:\n    repository: goharbor/harbor-jobservice\n    tag: v2.0.0\n  replicas:\
    \ 1\n  maxJobWorkers: 10\n  jobLogger: file\n  nodeSelector: {}\n  tolerations:\
    \ []\n  affinity: {}\n  podAnnotations: {}\n  secret: ''\nregistry:\n  registry:\n\
    \    image:\n      repository: goharbor/registry-photon\n      tag: v2.0.0\n \
    \ controller:\n    image:\n      repository: goharbor/harbor-registryctl\n   \
    \   tag: v2.0.0\n  replicas: 1\n  nodeSelector: {}\n  tolerations: []\n  affinity:\
    \ {}\n  podAnnotations: {}\n  secret: ''\n  relativeurls: false\n  credentials:\n\
    \    username: harbor_registry_user\n    password: harbor_registry_password\n\
    \    htpasswd: >-\n      harbor_registry_user:$2y$10$9L4Tc0DJbFFMB6RdSCunrOpTHdwhid4ktBJmLD00bYgqkkGOvll3m\n\
    \  middleware:\n    enabled: false\n    type: cloudFront\n    cloudFront:\n  \
    \    baseurl: example.cloudfront.net\n      keypairid: KEYPAIRID\n      duration:\
    \ 3000s\n      ipfilteredby: none\n      privateKeySecret: my-secret\nchartmuseum:\n\
    \  enabled: true\n  absoluteUrl: false\n  image:\n    repository: goharbor/chartmuseum-photon\n\
    \    tag: v2.0.0\n  replicas: 1\n  nodeSelector: {}\n  tolerations: []\n  affinity:\
    \ {}\n  podAnnotations: {}\nclair:\n  enabled: true\n  clair:\n    image:\n  \
    \    repository: goharbor/clair-photon\n      tag: v2.0.0\n  adapter:\n    image:\n\
    \      repository: goharbor/clair-adapter-photon\n      tag: v2.0.0\n  replicas:\
    \ 1\n  updatersInterval: 12\n  nodeSelector: {}\n  tolerations: []\n  affinity:\
    \ {}\n  podAnnotations: {}\ntrivy:\n  enabled: true\n  image:\n    repository:\
    \ goharbor/trivy-adapter-photon\n    tag: v2.0.0\n  replicas: 1\n  debugMode:\
    \ false\n  vulnType: 'os,library'\n  severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'\n\
    \  ignoreUnfixed: false\n  insecure: false\n  gitHubToken: ''\n  skipUpdate: false\n\
    \  resources:\n    requests:\n      cpu: 200m\n      memory: 512Mi\n    limits:\n\
    \      cpu: 1\n      memory: 1Gi\n  podAnnotations: {}\nnotary:\n  enabled: true\n\
    \  server:\n    image:\n      repository: goharbor/notary-server-photon\n    \
    \  tag: v2.0.0\n    replicas: 1\n  signer:\n    image:\n      repository: goharbor/notary-signer-photon\n\
    \      tag: v2.0.0\n    replicas: 1\n  nodeSelector: {}\n  tolerations: []\n \
    \ affinity: {}\n  podAnnotations: {}\n  secretName: ''\ndatabase:\n  type: internal\n\
    \  internal:\n    image:\n      repository: goharbor/harbor-db\n      tag: v2.0.0\n\
    \    initContainerImage:\n      repository: busybox\n      tag: latest\n    password:\
    \ changeit\n    nodeSelector: {}\n    tolerations: []\n    affinity: {}\n  external:\n\
    \    host: 192.168.0.1\n    port: '5432'\n    username: user\n    password: password\n\
    \    coreDatabase: registry\n    clairDatabase: clair\n    notaryServerDatabase:\
    \ notary_server\n    notarySignerDatabase: notary_signer\n    sslmode: disable\n\
    \  maxIdleConns: 50\n  maxOpenConns: 100\n  podAnnotations: {}\nredis:\n  type:\
    \ internal\n  internal:\n    image:\n      repository: goharbor/redis-photon\n\
    \      tag: v2.0.0\n    nodeSelector: {}\n    tolerations: []\n    affinity: {}\n\
    \  external:\n    host: 192.168.0.2\n    port: '6379'\n    coreDatabaseIndex:\
    \ '0'\n    jobserviceDatabaseIndex: '1'\n    registryDatabaseIndex: '2'\n    chartmuseumDatabaseIndex:\
    \ '3'\n    clairAdapterIndex: '4'\n    trivyAdapterIndex: '5'\n    password: ''\n\
    \  podAnnotations: {}"
  - 应用商店
  - 从应用商店部署harbor
  - CRITICAL
  - active
- - 3
  - PostgreSQL
  - "image:\n  postgres:\n    repository: postgres\n    tag: 12.0-alpine\n    pullPolicy:\
    \ IfNotPresent\nimagePullSecrets: []\nnameOverride: ''\nfullnameOverride: ''\n\
    serviceAccount:\n  create: true\n  name: null\npodSecurityContext: {}\nsecurityContext:\
    \ {}\npersistence:\n  enabled: true\n  size: 5Gi\n  subPath: pgdata\nrootUsername:\
    \ postgres\nrootPassword: password\nservice:\n  type: ClusterIP\n  port: 5432\n\
    resources: {}\nnodeSelector: {}\ntolerations: []\naffinity: {}\ntests:\n  enabled:\
    \ false"
  - 应用商店
  - 从应用商店部署postgresql
  - CRITICAL
  - active
- - 4
  - Elasticsearch Exporter
  - "replicaCount: 1\nrestartPolicy: Always\nimage:\n  repository: justwatch/elasticsearch_exporter\n\
    \  tag: 1.1.0\n  pullPolicy: IfNotPresent\n  pullSecret: ''\nsecurityContext:\n\
    \  enabled: true\n  runAsUser: 1000\nresources: {}\npriorityClassName: ''\nnodeSelector:\
    \ {}\ntolerations: {}\npodAnnotations: {}\naffinity: {}\nservice:\n  type: ClusterIP\n\
    \  httpPort: 9108\n  metricsPort:\n    name: http\n  annotations: {}\n  labels:\
    \ {}\nenv: {}\nenvFromSecret: ''\nextraEnvSecrets: {}\nsecretMounts: []\nes:\n\
    \  uri: 'http://localhost:9200'\n  all: true\n  indices: true\n  indices_settings:\
    \ true\n  shards: true\n  snapshots: true\n  cluster_settings: false\n  timeout:\
    \ 30s\n  sslSkipVerify: false\n  ssl:\n    enabled: false\n    useExistingSecrets:\
    \ false\n    ca:\n      path: /ssl/ca.pem\n    client:\n      enabled: true\n\
    \      pemPath: /ssl/client.pem\n      keyPath: /ssl/client.key\nweb:\n  path:\
    \ /metrics\nserviceMonitor:\n  enabled: true\n  labels:\n    app.kubernetes.io/vendor:\
    \ kubesphere\n  interval: 10s\n  scrapeTimeout: 10s\n  scheme: http\n  relabelings:\
    \ []\nprometheusRule:\n  enabled: false\n  labels: {}\n  rules: []\nserviceAccount:\n\
    \  create: false\n  name: default\npodSecurityPolicies:\n  enabled: false"
  - 应用商店
  - 从应用商店部署elasticsearch exporter
  - CRITICAL
  - active
- - 5
  - Redis
  - "image:\n  repository: redis\n  pullPolicy: IfNotPresent\nimagePullSecrets: []\n\
    nameOverride: ''\nfullnameOverride: ''\npersistence:\n  size: 1Gi\nconfig: |-\n\
    \  # redis.conf\n  appendonly yes\npassword: ''\nservice:\n  type: ClusterIP\n\
    \  port: 6379\nresources: {}\nnodeSelector: {}\ntolerations: []\naffinity: {}\n\
    tests:\n  enabled: false"
  - 应用商店
  - 从应用商店部署Redis
  - CRITICAL
  - active
- - 6
  - MongoDB
  - "image:\n  init:\n    repository: mikefarah/yq\n    tag: 2.4.1\n    pullPolicy:\
    \ IfNotPresent\n  mongo:\n    repository: mongo\n    tag: 4.2.1\n    pullPolicy:\
    \ IfNotPresent\nimagePullSecrets: []\nnameOverride: ''\nfullnameOverride: ''\n\
    persistence:\n  size: 5Gi\nextraConfigurations: {}\nrootUsername: admin\nrootPassword:\
    \ password\nservice:\n  type: ClusterIP\n  port: 27017\nresources: {}\nnodeSelector:\
    \ {}\ntolerations: []\naffinity: {}"
  - 应用商店
  - 从应用商店部署mongodb
  - CRITICAL
  - active
- - 7
  - RadonDB MySQL
  - "imagePullPolicy: IfNotPresent\nreplicaCount: 3\nbusybox:\n  image: busybox\n\
    \  tag: 1.32\nmysql:\n  image: xenondb/percona\n  tag: 5.7.33\n  allowEmptyRootPassword:\
    \ true\n  mysqlReplicationPassword: Repl_123\n  mysqlUser: qingcloud\n  mysqlPassword:\
    \ Qing@123\n  mysqlDatabase: qingcloud\n  initTokudb: false\n  args: []\n  configFiles:\n\
    \    node.cnf: |\n      [mysqld]\n      default_storage_engine=InnoDB\n      max_connections=65535\n\
    \  livenessProbe:\n    initialDelaySeconds: 30\n    periodSeconds: 10\n    timeoutSeconds:\
    \ 5\n    successThreshold: 1\n    failureThreshold: 3\n  readinessProbe:\n   \
    \ initialDelaySeconds: 10\n    periodSeconds: 10\n    timeoutSeconds: 1\n    successThreshold:\
    \ 1\n    failureThreshold: 3\n  resources: {}\nxenon:\n  image: xenondb/xenon\n\
    \  tag: 1.1.5-alpha\n  args: []\n  livenessProbe:\n    initialDelaySeconds: 30\n\
    \    periodSeconds: 10\n    timeoutSeconds: 5\n    successThreshold: 1\n    failureThreshold:\
    \ 3\n  readinessProbe:\n    initialDelaySeconds: 10\n    periodSeconds: 10\n \
    \   timeoutSeconds: 1\n    successThreshold: 1\n    failureThreshold: 3\n  resources:\
    \ {}\nmetrics:\n  enabled: false\n  image: prom/mysqld-exporter\n  tag: v0.12.1\n\
    \  annotations: {}\n  livenessProbe:\n    initialDelaySeconds: 15\n    timeoutSeconds:\
    \ 5\n  readinessProbe:\n    initialDelaySeconds: 5\n    timeoutSeconds: 1\n  serviceMonitor:\n\
    \    enabled: false\n    interval: 10s\nslowLogTail: true\nresources: {}\nservice:\n\
    \  annotations: {}\n  type: ClusterIP\n  port: 3306\nrbac:\n  create: true\nserviceAccount:\n\
    \  create: true\n  name: null\npersistence:\n  enabled: true\n  accessModes:\n\
    \    - ReadWriteOnce\n  size: 10Gi\n  annotations: {}\n  reclaimPolicy: ''\nstatefulsetAnnotations:\
    \ {}\npodAnnotations: {}\npodLabels: {}\nnodeSelector: {}\nhardAntiAffinity: true\n\
    additionalAffinities: {}\naffinity: {}"
  - 应用商店
  - 从应用商店部署RadonDB MYSQL
  - CRITICAL
  - active
- - 8
  - Memcached
  - "image: 'memcached:1.5.20'\nreplicaCount: 1\npdbMinAvailable: 2\nAntiAffinity:\
    \ hard\nmemcached:\n  maxItemMemory: 64\n  verbosity: v\n  extendedOptions: modern\n\
    \  extraArgs: []\nserviceAnnotations: {}\nkind: StatefulSet\nupdateStrategy:\n\
    \  type: RollingUpdate\nresources:\n  requests:\n    memory: 64Mi\n    cpu: 50m\n\
    nodeSelector: {}\ntolerations: {}\naffinity: {}\nsecurityContext:\n  enabled:\
    \ true\n  fsGroup: 1001\n  runAsUser: 1001\nmetrics:\n  enabled: false\n  serviceMonitor:\n\
    \    enabled: false\n    interval: 15s\n  image: 'quay.io/prometheus/memcached-exporter:v0.6.0'\n\
    \  resources: {}\nextraContainers: ''\nextraVolumes: ''\npodAnnotations: {}"
  - 应用商店
  - 从应用商店部署memcached
  - CRITICAL
  - active
- - 9
  - MinIO
  - "nameOverride: ''\nfullnameOverride: ''\nclusterDomain: cluster.local\nimage:\n\
    \  repository: minio/minio\n  tag: RELEASE.2020-08-08T04-50-06Z\n  pullPolicy:\
    \ IfNotPresent\nmcImage:\n  repository: minio/mc\n  tag: RELEASE.2020-08-08T02-33-58Z\n\
    \  pullPolicy: IfNotPresent\nhelmKubectlJqImage:\n  repository: bskim45/helm-kubectl-jq\n\
    \  tag: 3.1.0\n  pullPolicy: IfNotPresent\nmode: standalone\nextraArgs: []\nDeploymentUpdate:\n\
    \  type: RollingUpdate\n  maxUnavailable: 0\n  maxSurge: 100%\nStatefulSetUpdate:\n\
    \  updateStrategy: RollingUpdate\npriorityClassName: ''\nexistingSecret: ''\n\
    accessKey: YOURACCESSKEY\nsecretKey: YOURSECRETKEY\ncertsPath: /etc/minio/certs/\n\
    configPathmc: /etc/minio/mc/\nmountPath: /export\nbucketRoot: ''\ndrivesPerNode:\
    \ 1\nreplicas: 4\nzones: 1\ntls:\n  enabled: false\n  certSecret: ''\n  publicCrt:\
    \ public.crt\n  privateKey: private.key\npersistence:\n  enabled: true\n  existingClaim:\
    \ ''\n  storageClass: ''\n  VolumeName: ''\n  accessMode: ReadWriteOnce\n  size:\
    \ 500Gi\n  subPath: ''\nservice:\n  type: ClusterIP\n  clusterIP: null\n  port:\
    \ 9000\n  nodePort: 32000\n  externalIPs: []\n  annotations: {}\nimagePullSecrets:\
    \ []\ningress:\n  enabled: false\n  labels: {}\n  annotations: {}\n  path: /\n\
    \  hosts:\n    - chart-example.local\n  tls: []\nnodeSelector: {}\ntolerations:\
    \ []\naffinity: {}\nsecurityContext:\n  enabled: true\n  runAsUser: 1000\n  runAsGroup:\
    \ 1000\n  fsGroup: 1000\npodAnnotations: {}\npodLabels: {}\nlivenessProbe:\n \
    \ initialDelaySeconds: 5\n  periodSeconds: 5\n  timeoutSeconds: 1\n  successThreshold:\
    \ 1\n  failureThreshold: 1\nreadinessProbe:\n  initialDelaySeconds: 30\n  periodSeconds:\
    \ 5\n  timeoutSeconds: 6\n  successThreshold: 1\n  failureThreshold: 3\nresources:\n\
    \  requests:\n    memory: 4Gi\ndefaultBucket:\n  enabled: false\n  name: bucket\n\
    \  policy: none\n  purge: false\nbuckets: []\nmakeBucketJob:\n  annotations: null\n\
    updatePrometheusJob:\n  annotations: null\ns3gateway:\n  enabled: false\n  replicas:\
    \ 4\n  serviceEndpoint: ''\n  accessKey: ''\n  secretKey: ''\nazuregateway:\n\
    \  enabled: false\n  replicas: 4\ngcsgateway:\n  enabled: false\n  replicas: 4\n\
    \  gcsKeyJson: ''\n  projectId: ''\nossgateway:\n  enabled: false\n  replicas:\
    \ 4\n  endpointURL: ''\nnasgateway:\n  enabled: false\n  replicas: 4\n  pv: null\n\
    b2gateway:\n  enabled: false\n  replicas: 4\nenvironment:\n  MINIO_API_READY_DEADLINE:\
    \ 5s\nnetworkPolicy:\n  enabled: false\n  allowExternal: true\npodDisruptionBudget:\n\
    \  enabled: false\n  maxUnavailable: 1\nserviceAccount:\n  create: true\n  name:\
    \ null\nmetrics:\n  serviceMonitor:\n    enabled: false\n    additionalLabels:\
    \ {}\netcd:\n  endpoints: []\n  pathPrefix: ''\n  corednsPathPrefix: ''\n  clientCert:\
    \ ''\n  clientCertKey: ''"
  - 应用商店
  - 从应用商店部署Minio
  - CRITICAL
  - active
- - 10
  - MySQL Exporter
  - "replicaCount: 1\nimage:\n  repository: prom/mysqld-exporter\n  tag: v0.11.0\n\
    \  pullPolicy: IfNotPresent\nservice:\n  name: mysql-exporter\n  type: ClusterIP\n\
    \  externalPort: 9104\n  internalPort: 9104\nserviceMonitor:\n  enabled: true\n\
    \  additionalLabels:\n    app.kubernetes.io/vendor: kubesphere\n  jobLabel: ''\n\
    \  targetLabels: []\n  podTargetLabels: []\nresources: {}\nnodeSelector: {}\n\
    tolerations: []\naffinity: {}\npodLabels: {}\nannotations:\n  prometheus.io/scrape:\
    \ 'true'\n  prometheus.io/path: /metrics\n  prometheus.io/port: '9104'\ncollectors:\
    \ {}\nmysql:\n  db: ''\n  host: localhost\n  param: ''\n  pass: password\n  port:\
    \ 3306\n  protocol: ''\n  user: exporter\n  existingSecret: false\ncloudsqlproxy:\n\
    \  enabled: false\n  image:\n    repo: gcr.io/cloudsql-docker/gce-proxy\n    tag:\
    \ '1.14'\n    pullPolicy: IfNotPresent\n  instanceConnectionName: 'project:us-central1:dbname'\n\
    \  port: '3306'\n  credentials: >-\n    { \"type\": \"service_account\", \"project_id\"\
    : \"project\", \"private_key_id\":\n    \"KEYID1\", \"private_key\": \"-----BEGIN\
    \ PRIVATE KEY-----\\sdajsdnasd\\n-----END\n    PRIVATE KEY-----\\n\", \"client_email\"\
    : \"user@project.iam.gserviceaccount.com\",\n    \"client_id\": \"111111111\"\
    , \"auth_uri\":\n    \"https://accounts.google.com/o/oauth2/auth\", \"token_uri\"\
    :\n    \"https://accounts.google.com/o/oauth2/token\", \"auth_provider_x509_cert_url\"\
    :\n    \"https://www.googleapis.com/oauth2/v1/certs\", \"client_x509_cert_url\"\
    :\n    \"https://www.googleapis.com/robot/v1/metadata/x509/user%40project.iam.gserviceaccount.com\"\
    \n    }"
  - 应用商店
  - 从应用商店部署mysql exporter
  - CRITICAL
  - active
- - 11
  - Tomcat
  - "replicaCount: 1\nimage:\n  webarchive:\n    repository: ananwaresystems/webarchive\n\
    \    tag: '1.0'\n  tomcat:\n    repository: tomcat\n    tag: 8.5.41-alpine\n \
    \ pullPolicy: IfNotPresent\n  pullSecrets: []\ndeploy:\n  directory: /usr/local/tomcat/webapps\n\
    service:\n  name: http\n  type: ClusterIP\n  externalPort: 80\n  internalPort:\
    \ 8080\ningress:\n  enabled: false\n  annotations: {}\n  path: /\n  hosts:\n \
    \   - chart-example.local\n  tls: []\nenv: []\nextraVolumes: []\nextraVolumeMounts:\
    \ []\nextraInitContainers: []\nreadinessProbe:\n  path: /sample\n  initialDelaySeconds:\
    \ 60\n  periodSeconds: 30\n  failureThreshold: 6\n  timeoutSeconds: 5\nlivenessProbe:\n\
    \  path: /sample\n  initialDelaySeconds: 60\n  periodSeconds: 30\n  failureThreshold:\
    \ 6\n  timeoutSeconds: 5\nresources: {}\nnodeSelector: {}\ntolerations: []\naffinity:\
    \ {}"
  - 应用商店
  - 从应用商店部署tomcat
  - CRITICAL
  - active
- - 12
  - etcd
  - "image:\n  repository: kubesphere/etcd\n  pullPolicy: IfNotPresent\nimagePullSecrets:\
    \ []\nnameOverride: ''\nfullnameOverride: ''\npersistence:\n  size: 5Gi\nextraArgs:\
    \ []\nservice:\n  port: 2379\nresources: {}\nnodeSelector: {}\ntolerations: []\n\
    affinity: {}\ntests:\n  enabled: false"
  - 应用商店
  - 从应用商店部署etcd
  - CRITICAL
  - active
- - 13
  - MySQL
  - "image: mysql\nimageTag: 5.7.30\nstrategy:\n  type: Recreate\nbusybox:\n  image:\
    \ busybox\n  tag: '1.32'\ntestFramework:\n  enabled: true\n  image: bats/bats\n\
    \  tag: 1.2.1\n  imagePullPolicy: IfNotPresent\n  securityContext: {}\nimagePullPolicy:\
    \ IfNotPresent\nargs: []\nextraVolumes: |\n  # - name: extras\n  #   emptyDir:\
    \ {}\nextraVolumeMounts: |\n  # - name: extras\n  #   mountPath: /usr/share/extras\n\
    \  #   readOnly: true\nextraInitContainers: |\n  # - name: do-something\n  # \
    \  image: busybox\n  #   command: ['do', 'something']\nnodeSelector: {}\naffinity:\
    \ {}\ntolerations: []\nlivenessProbe:\n  initialDelaySeconds: 30\n  periodSeconds:\
    \ 10\n  timeoutSeconds: 5\n  successThreshold: 1\n  failureThreshold: 3\nreadinessProbe:\n\
    \  initialDelaySeconds: 5\n  periodSeconds: 10\n  timeoutSeconds: 1\n  successThreshold:\
    \ 1\n  failureThreshold: 3\npersistence:\n  enabled: true\n  accessMode: ReadWriteOnce\n\
    \  size: 8Gi\n  annotations: {}\nsecurityContext:\n  enabled: false\n  runAsUser:\
    \ 999\n  fsGroup: 999\nresources:\n  requests:\n    memory: 256Mi\n    cpu: 100m\n\
    configurationFilesPath: /etc/mysql/conf.d/\nconfigurationFiles: {}\ninitializationFiles:\
    \ {}\nmetrics:\n  enabled: false\n  image: prom/mysqld-exporter\n  imageTag: v0.10.0\n\
    \  imagePullPolicy: IfNotPresent\n  resources: {}\n  annotations: {}\n  livenessProbe:\n\
    \    initialDelaySeconds: 15\n    timeoutSeconds: 5\n  readinessProbe:\n    initialDelaySeconds:\
    \ 5\n    timeoutSeconds: 1\n  flags: []\n  serviceMonitor:\n    enabled: false\n\
    \    additionalLabels: {}\nservice:\n  annotations: {}\n  type: ClusterIP\n  port:\
    \ 3306\nserviceAccount:\n  create: false\nssl:\n  enabled: false\n  secret: mysql-ssl-certs\n\
    \  certificates: null\ndeploymentAnnotations: {}\npodAnnotations: {}\npodLabels:\
    \ {}\ninitContainer:\n  resources:\n    requests:\n      memory: 10Mi\n      cpu:\
    \ 10m"
  - 应用商店
  - '从应用商店部署mysql '
  - CRITICAL
  - active
- - 14
  - Redis Exporter
  - "rbac:\n  create: true\n  pspEnabled: true\nserviceAccount:\n  create: true\n\
    \  name: null\nreplicaCount: 1\nimage:\n  repository: oliver006/redis_exporter\n\
    \  tag: v1.3.4\n  pullPolicy: IfNotPresent\nextraArgs: {}\nenv: {}\nservice:\n\
    \  type: ClusterIP\n  port: 9121\n  annotations: {}\n  labels: {}\nresources:\
    \ {}\nnodeSelector: {}\ntolerations: []\naffinity: {}\nredisAddress: 'redis://myredis:6379'\n\
    annotations: {}\nserviceMonitor:\n  enabled: true\n  labels:\n    app.kubernetes.io/vendor:\
    \ kubesphere\nprometheusRule:\n  enabled: false\n  additionalLabels: {}\n  namespace:\
    \ ''\n  rules: []\nauth:\n  enabled: false\n  secret:\n    name: ''\n    key:\
    \ ''\n  redisPassword: ''"
  - 应用商店
  - 从应用商店部署redis exporter
  - CRITICAL
  - active
- - 15
  - APISIX
  - "replicaCount: 1\nimage:\n  repository: apache/apisix\n  pullPolicy: IfNotPresent\n\
    \  tag: 1.5-alpine\nimagePullSecrets: []\nnameOverride: ''\nfullnameOverride:\
    \ ''\npodAnnotations: {}\npodSecurityContext: {}\nsecurityContext: {}\ngateway:\n\
    \  k8s_domain: cluster.local\n  type: NodePort\n  http:\n    enabled: true\n \
    \   servicePort: 80\n    containerPort: 9080\n  tls:\n    enabled: false\n   \
    \ servicePort: 443\n    containerPort: 9443\n    http2:\n      enabled: true\n\
    \  ingress:\n    enabled: false\n    annotations: null\n    hosts:\n      - host:\
    \ apisix.local\n        paths: []\n    tls: []\netcd:\n  prefix: /apisix\n  timeout:\
    \ 3\n  port: 2379\n  enabled: true\n  resources:\n    limits: null\n    requests:\n\
    \      cpu: 100m\n      memory: 128Mi\ndns:\n  validity: 30\n  timeout: 5\nadmin:\n\
    \  enabled: true\n  cors: true\n  credentials:\n    admin: edd1c9f034335f136f87ad84b625c8f1\n\
    \    viewer: 4054f7cf07e344346cd3f287985e76a2\nplugins:\n  - example-plugin\n\
    \  - limit-req\n  - limit-count\n  - limit-conn\n  - key-auth\n  - basic-auth\n\
    \  - prometheus\n  - node-status\n  - jwt-auth\n  - zipkin\n  - ip-restriction\n\
    \  - grpc-transcode\n  - serverless-pre-function\n  - serverless-post-function\n\
    \  - openid-connect\n  - proxy-rewrite\n  - redirect\n  - response-rewrite\n \
    \ - fault-injection\n  - udp-logger\n  - wolf-rbac\n  - proxy-cache\n  - tcp-logger\n\
    \  - proxy-mirror\n  - kafka-logger\n  - cors\nstream_plugins:\n  - mqtt-proxy\n\
    resources:\n  limits: null\n  requests:\n    cpu: 50m\nautoscaling:\n  enabled:\
    \ false\n  minReplicas: 1\n  maxReplicas: 100\n  targetCPUUtilizationPercentage:\
    \ 80\n  targetMemoryUtilizationPercentage: 80\nnodeSelector: {}\ntolerations:\
    \ []\naffinity: {}\ntests:\n  enabled: false"
  - 应用商店
  - 从应用商店部署apisix
  - CRITICAL
  - active
- - 16
  - NGINX
  - "replicaCount: 1\nimage:\n  html: {}\n  nginx:\n    repository: nginx\n    pullPolicy:\
    \ IfNotPresent\nnameOverride: ''\nfullnameOverride: ''\nservice:\n  name: http\n\
    \  type: ClusterIP\n  port: 80\ningress:\n  enabled: false\n  annotations: {}\n\
    \  paths:\n    - /\n  hosts:\n    - nginx.local\n  tls: []\nextraVolumes: []\n\
    extraVolumeMounts: []\nextraInitContainers: []\nreadinessProbe:\n  path: /\n \
    \ initialDelaySeconds: 5\n  periodSeconds: 3\n  failureThreshold: 6\nlivenessProbe:\n\
    \  path: /\n  initialDelaySeconds: 5\n  periodSeconds: 3\nresources: {}\nconfigurationFile:\
    \ {}\nextraConfigurationFiles: {}\nnodeSelector: {}\ntolerations: []\naffinity:\
    \ {}\ntests:\n  enabled: false"
  - 应用商店
  - 从应用商店部署NGINX
  - CRITICAL
  - active
