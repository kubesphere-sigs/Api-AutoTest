- - 1
  - RabbitMQ
  - "image:\n  rabbitmq:\n    repository: rabbitmq\n    tag: 3.8.1-alpine\n    pullPolicy: IfNotPresent\nimagePullSecrets: []\nnameOverride: ''\nfullnameOverride: ''\npersistence:\n  size: 5Gi\nextraPlugins: []\nextraConfigurations: |-\n  ## Number of Erlang processes that will accept connections for the TCP\n  ## and TLS listeners.\n  ##\n  # num_acceptors.tcp = 10\n  # num_acceptors.ssl = 10\nadvancedConfigurations: |-\n  [\n    {rabbitmq_auth_backend_ldap, [\n      %% Authorisation\n    ]}\n  ].\ndefaultUsername: admin\ndefaultPassword: password\nservice:\n  type: ClusterIP\nresources: {}\nnodeSelector: {}\ntolerations: []\naffinity: {}\n"
  - 应用商店
  - 从应用商店部署RabbitMQ
  - CRITICAL
  - created
- - 2
  - Harbor
  - "expose:\n  type: ingress\n  tls:\n    enabled: true\n    secretName: ''\n    notarySecretName: ''\n    commonName: ''\n  ingress:\n    hosts:\n      core: core.harbor.domain\n      notary: notary.harbor.domain\n    controller: default\n    annotations:\n      ingress.kubernetes.io/ssl-redirect: 'true'\n      ingress.kubernetes.io/proxy-body-size: '0'\n      nginx.ingress.kubernetes.io/ssl-redirect: 'true'\n      nginx.ingress.kubernetes.io/proxy-body-size: '0'\n  clusterIP:\n    name: harbor\n    ports:\n      httpPort: 80\n      httpsPort: 443\n      notaryPort: 4443\n  nodePort:\n    name: harbor\n    ports:\n      http:\n        port: 80\n        nodePort: 30002\n      https:\n        port: 443\n        nodePort: 30003\n      notary:\n        port: 4443\n        nodePort: 30004\n  loadBalancer:\n    name: harbor\n    IP: ''\n    ports:\n      httpPort: 80\n      httpsPort: 443\n      notaryPort: 4443\n    annotations: {}\n    sourceRanges: []\nexternalURL: 'https://core.harbor.domain'\ninternalTLS:\n  enabled: false\n  certSource: auto\n  trustCa: ''\n  core:\n    secretName: ''\n    crt: ''\n    key: ''\n  jobservice:\n    secretName: ''\n    crt: ''\n    key: ''\n  registry:\n    secretName: ''\n    crt: ''\n    key: ''\n  portal:\n    secretName: ''\n    crt: ''\n    key: ''\n  chartmuseum:\n    secretName: ''\n    crt: ''\n    key: ''\n  clair:\n    secretName: ''\n    crt: ''\n    key: ''\n  trivy:\n    secretName: ''\n    crt: ''\n    key: ''\npersistence:\n  enabled: true\n  resourcePolicy: keep\n  persistentVolumeClaim:\n    registry:\n      existingClaim: ''\n      storageClass: ''\n      subPath: ''\n      accessMode: ReadWriteOnce\n      size: 5Gi\n    chartmuseum:\n      existingClaim: ''\n      storageClass: ''\n      subPath: ''\n      accessMode: ReadWriteOnce\n      size: 5Gi\n    jobservice:\n      existingClaim: ''\n      storageClass: ''\n      subPath: ''\n      accessMode: ReadWriteOnce\n      size: 1Gi\n    database:\n      existingClaim: ''\n      storageClass: ''\n      subPath: ''\n      accessMode: ReadWriteOnce\n      size: 1Gi\n    redis:\n      existingClaim: ''\n      storageClass: ''\n      subPath: ''\n      accessMode: ReadWriteOnce\n      size: 1Gi\n    trivy:\n      existingClaim: ''\n      storageClass: ''\n      subPath: ''\n      accessMode: ReadWriteOnce\n      size: 5Gi\n  imageChartStorage:\n    disableredirect: false\n    type: filesystem\n    filesystem:\n      rootdirectory: /storage\n    azure:\n      accountname: accountname\n      accountkey: base64encodedaccountkey\n      container: containername\n    gcs:\n      bucket: bucketname\n      encodedkey: base64-encoded-json-key-file\n    s3:\n      region: us-west-1\n      bucket: bucketname\n    swift:\n      authurl: 'https://storage.myprovider.com/v3/auth'\n      username: username\n      password: password\n      container: containername\n    oss:\n      accesskeyid: accesskeyid\n      accesskeysecret: accesskeysecret\n      region: regionname\n      bucket: bucketname\nimagePullPolicy: IfNotPresent\nimagePullSecrets: null\nupdateStrategy:\n  type: RollingUpdate\nlogLevel: info\nharborAdminPassword: Harbor12345\nsecretKey: not-a-secure-key\nproxy:\n  httpProxy: null\n  httpsProxy: null\n  noProxy: '127.0.0.1,localhost,.local,.internal'\n  components:\n    - core\n    - jobservice\n    - clair\nnginx:\n  image:\n    repository: goharbor/nginx-photon\n    tag: v2.0.0\n  replicas: 1\n  nodeSelector: {}\n  tolerations: []\n  affinity: {}\n  podAnnotations: {}\nportal:\n  image:\n    repository: goharbor/harbor-portal\n    tag: v2.0.0\n  replicas: 1\n  nodeSelector: {}\n  tolerations: []\n  affinity: {}\n  podAnnotations: {}\ncore:\n  image:\n    repository: goharbor/harbor-core\n    tag: v2.0.0\n  replicas: 1\n  livenessProbe:\n    initialDelaySeconds: 300\n  nodeSelector: {}\n  tolerations: []\n  affinity: {}\n  podAnnotations: {}\n  secret: ''\n  secretName: ''\n  xsrfKey: ''\njobservice:\n  image:\n    repository: goharbor/harbor-jobservice\n    tag: v2.0.0\n  replicas: 1\n  maxJobWorkers: 10\n  jobLogger: file\n  nodeSelector: {}\n  tolerations: []\n  affinity: {}\n  podAnnotations: {}\n  secret: ''\nregistry:\n  registry:\n    image:\n      repository: goharbor/registry-photon\n      tag: v2.0.0\n  controller:\n    image:\n      repository: goharbor/harbor-registryctl\n      tag: v2.0.0\n  replicas: 1\n  nodeSelector: {}\n  tolerations: []\n  affinity: {}\n  podAnnotations: {}\n  secret: ''\n  relativeurls: false\n  credentials:\n    username: harbor_registry_user\n    password: harbor_registry_password\n    htpasswd: >-\n      harbor_registry_user:$2y$10$9L4Tc0DJbFFMB6RdSCunrOpTHdwhid4ktBJmLD00bYgqkkGOvll3m\n  middleware:\n    enabled: false\n    type: cloudFront\n    cloudFront:\n      baseurl: example.cloudfront.net\n      keypairid: KEYPAIRID\n      duration: 3000s\n      ipfilteredby: none\n      privateKeySecret: my-secret\nchartmuseum:\n  enabled: true\n  absoluteUrl: false\n  image:\n    repository: goharbor/chartmuseum-photon\n    tag: v2.0.0\n  replicas: 1\n  nodeSelector: {}\n  tolerations: []\n  affinity: {}\n  podAnnotations: {}\nclair:\n  enabled: true\n  clair:\n    image:\n      repository: goharbor/clair-photon\n      tag: v2.0.0\n  adapter:\n    image:\n      repository: goharbor/clair-adapter-photon\n      tag: v2.0.0\n  replicas: 1\n  updatersInterval: 12\n  nodeSelector: {}\n  tolerations: []\n  affinity: {}\n  podAnnotations: {}\ntrivy:\n  enabled: true\n  image:\n    repository: goharbor/trivy-adapter-photon\n    tag: v2.0.0\n  replicas: 1\n  debugMode: false\n  vulnType: 'os,library'\n  severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'\n  ignoreUnfixed: false\n  insecure: false\n  gitHubToken: ''\n  skipUpdate: false\n  resources:\n    requests:\n      cpu: 200m\n      memory: 512Mi\n    limits:\n      cpu: 1\n      memory: 1Gi\n  podAnnotations: {}\nnotary:\n  enabled: true\n  server:\n    image:\n      repository: goharbor/notary-server-photon\n      tag: v2.0.0\n    replicas: 1\n  signer:\n    image:\n      repository: goharbor/notary-signer-photon\n      tag: v2.0.0\n    replicas: 1\n  nodeSelector: {}\n  tolerations: []\n  affinity: {}\n  podAnnotations: {}\n  secretName: ''\ndatabase:\n  type: internal\n  internal:\n    image:\n      repository: goharbor/harbor-db\n      tag: v2.0.0\n    initContainerImage:\n      repository: busybox\n      tag: latest\n    password: changeit\n    nodeSelector: {}\n    tolerations: []\n    affinity: {}\n  external:\n    host: 192.168.0.1\n    port: '5432'\n    username: user\n    password: password\n    coreDatabase: registry\n    clairDatabase: clair\n    notaryServerDatabase: notary_server\n    notarySignerDatabase: notary_signer\n    sslmode: disable\n  maxIdleConns: 50\n  maxOpenConns: 100\n  podAnnotations: {}\nredis:\n  type: internal\n  internal:\n    image:\n      repository: goharbor/redis-photon\n      tag: v2.0.0\n    nodeSelector: {}\n    tolerations: []\n    affinity: {}\n  external:\n    host: 192.168.0.2\n    port: '6379'\n    coreDatabaseIndex: '0'\n    jobserviceDatabaseIndex: '1'\n    registryDatabaseIndex: '2'\n    chartmuseumDatabaseIndex: '3'\n    clairAdapterIndex: '4'\n    trivyAdapterIndex: '5'\n    password: ''\n  podAnnotations: {}\n"
  - 应用商店
  - 从应用商店部署harbor
  - CRITICAL
  - created
- - 3
  - PostgreSQL
  - "image:\n  postgres:\n    repository: postgres\n    tag: 12.0-alpine\n    pullPolicy: IfNotPresent\nimagePullSecrets: []\nnameOverride: ''\nfullnameOverride: ''\nserviceAccount:\n  create: true\n  name: null\npodSecurityContext: {}\nsecurityContext: {}\npersistence:\n  enabled: true\n  size: 5Gi\n  subPath: pgdata\nrootUsername: postgres\nrootPassword: password\nservice:\n  type: ClusterIP\n  port: 5432\nresources: {}\nnodeSelector: {}\ntolerations: []\naffinity: {}\ntests:\n  enabled: false\n"
  - 应用商店
  - 从应用商店部署postgresql
  - CRITICAL
  - created
- - 4
  - Elasticsearch Exporter
  - "replicaCount: 1\nrestartPolicy: Always\nimage:\n  repository: justwatch/elasticsearch_exporter\n  tag: 1.1.0\n  pullPolicy: IfNotPresent\n  pullSecret: ''\nsecurityContext:\n  enabled: true\n  runAsUser: 1000\nresources: {}\npriorityClassName: ''\nnodeSelector: {}\ntolerations: {}\npodAnnotations: {}\naffinity: {}\nservice:\n  type: ClusterIP\n  httpPort: 9108\n  metricsPort:\n    name: http\n  annotations: {}\n  labels: {}\nenv: {}\nenvFromSecret: ''\nextraEnvSecrets: {}\nsecretMounts: []\nes:\n  uri: 'http://localhost:9200'\n  all: true\n  indices: true\n  indices_settings: true\n  shards: true\n  snapshots: true\n  cluster_settings: false\n  timeout: 30s\n  sslSkipVerify: false\n  ssl:\n    enabled: false\n    useExistingSecrets: false\n    ca:\n      path: /ssl/ca.pem\n    client:\n      enabled: true\n      pemPath: /ssl/client.pem\n      keyPath: /ssl/client.key\nweb:\n  path: /metrics\nserviceMonitor:\n  enabled: true\n  labels:\n    app.kubernetes.io/vendor: kubesphere\n  interval: 10s\n  scrapeTimeout: 10s\n  scheme: http\n  relabelings: []\nprometheusRule:\n  enabled: false\n  labels: {}\n  rules: []\nserviceAccount:\n  create: false\n  name: default\npodSecurityPolicies:\n  enabled: false\n"
  - 应用商店
  - 从应用商店部署elasticsearch exporter
  - CRITICAL
  - created

- - 5
  - Redis
  - "image:\n  repository: redis\n  pullPolicy: IfNotPresent\nimagePullSecrets: []\nnameOverride: ''\nfullnameOverride: ''\npersistence:\n  size: 1Gi\nconfig: |-\n  # redis.conf\n  appendonly yes\npassword: ''\nservice:\n  type: ClusterIP\n  port: 6379\nresources: {}\nnodeSelector: {}\ntolerations: []\naffinity: {}\ntests:\n  enabled: false\n"
  - 应用商店
  - 从应用商店部署Redis
  - CRITICAL
  - created

- - 6
  - MongoDB
  - "image:\n  init:\n    repository: mikefarah/yq\n    tag: 2.4.1\n    pullPolicy: IfNotPresent\n  mongo:\n    repository: mongo\n    tag: 4.2.1\n    pullPolicy: IfNotPresent\nimagePullSecrets: []\nnameOverride: ''\nfullnameOverride: ''\npersistence:\n  size: 5Gi\nextraConfigurations: {}\nrootUsername: admin\nrootPassword: password\nservice:\n  type: ClusterIP\n  port: 27017\nresources: {}\nnodeSelector: {}\ntolerations: []\naffinity: {}\n"
  - 应用商店
  - 从应用商店部署mongodb
  - CRITICAL
  - created

- - 7
  - RadonDB MySQL
  - "imagePullPolicy: IfNotPresent\nreplicaCount: 3\nbusybox:\n  image: busybox\n  tag: 1.32\nmysql:\n  image: xenondb/percona\n  tag: 5.7.33\n  allowEmptyRootPassword: true\n  mysqlReplicationPassword: Repl_123\n  mysqlUser: qingcloud\n  mysqlPassword: Qing@123\n  mysqlDatabase: qingcloud\n  initTokudb: false\n  args: []\n  configFiles:\n    node.cnf: |\n      [mysqld]\n      default_storage_engine=InnoDB\n      max_connections=65535\n  livenessProbe:\n    initialDelaySeconds: 30\n    periodSeconds: 10\n    timeoutSeconds: 5\n    successThreshold: 1\n    failureThreshold: 3\n  readinessProbe:\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    timeoutSeconds: 1\n    successThreshold: 1\n    failureThreshold: 3\n  resources: {}\nxenon:\n  image: xenondb/xenon\n  tag: 1.1.5-alpha\n  args: []\n  livenessProbe:\n    initialDelaySeconds: 30\n    periodSeconds: 10\n    timeoutSeconds: 5\n    successThreshold: 1\n    failureThreshold: 3\n  readinessProbe:\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    timeoutSeconds: 1\n    successThreshold: 1\n    failureThreshold: 3\n  resources: {}\nmetrics:\n  enabled: false\n  image: prom/mysqld-exporter\n  tag: v0.12.1\n  annotations: {}\n  livenessProbe:\n    initialDelaySeconds: 15\n    timeoutSeconds: 5\n  readinessProbe:\n    initialDelaySeconds: 5\n    timeoutSeconds: 1\n  serviceMonitor:\n    enabled: false\n    interval: 10s\nslowLogTail: true\nresources: {}\nservice:\n  annotations: {}\n  type: ClusterIP\n  port: 3306\nrbac:\n  create: true\nserviceAccount:\n  create: true\n  name: null\npersistence:\n  enabled: true\n  accessModes:\n    - ReadWriteOnce\n  size: 10Gi\n  annotations: {}\n  reclaimPolicy: ''\nstatefulsetAnnotations: {}\npodAnnotations: {}\npodLabels: {}\nnodeSelector: {}\nhardAntiAffinity: true\nadditionalAffinities: {}\naffinity: {}\n"
  - 应用商店
  - 从应用商店部署RadonDB MYSQL
  - CRITICAL
  - created

- - 8
  - Memcached
  - "image: 'memcached:1.5.20'\nreplicaCount: 3\npdbMinAvailable: 2\nAntiAffinity: hard\nmemcached:\n  maxItemMemory: 64\n  verbosity: v\n  extendedOptions: modern\n  extraArgs: []\nserviceAnnotations: {}\nkind: StatefulSet\nupdateStrategy:\n  type: RollingUpdate\nresources:\n  requests:\n    memory: 64Mi\n    cpu: 50m\nnodeSelector: {}\ntolerations: {}\naffinity: {}\nsecurityContext:\n  enabled: true\n  fsGroup: 1001\n  runAsUser: 1001\nmetrics:\n  enabled: false\n  serviceMonitor:\n    enabled: false\n    interval: 15s\n  image: 'quay.io/prometheus/memcached-exporter:v0.6.0'\n  resources: {}\nextraContainers: ''\nextraVolumes: ''\npodAnnotations: {}\n"
  - 应用商店
  - 从应用商店部署memcached
  - CRITICAL
  - created

- - 9
  - MinIO
  - "nameOverride: ''\nfullnameOverride: ''\nclusterDomain: cluster.local\nimage:\n  repository: minio/minio\n  tag: RELEASE.2020-08-08T04-50-06Z\n  pullPolicy: IfNotPresent\nmcImage:\n  repository: minio/mc\n  tag: RELEASE.2020-08-08T02-33-58Z\n  pullPolicy: IfNotPresent\nhelmKubectlJqImage:\n  repository: bskim45/helm-kubectl-jq\n  tag: 3.1.0\n  pullPolicy: IfNotPresent\nmode: standalone\nextraArgs: []\nDeploymentUpdate:\n  type: RollingUpdate\n  maxUnavailable: 0\n  maxSurge: 100%\nStatefulSetUpdate:\n  updateStrategy: RollingUpdate\npriorityClassName: ''\nexistingSecret: ''\naccessKey: YOURACCESSKEY\nsecretKey: YOURSECRETKEY\ncertsPath: /etc/minio/certs/\nconfigPathmc: /etc/minio/mc/\nmountPath: /export\nbucketRoot: ''\ndrivesPerNode: 1\nreplicas: 4\nzones: 1\ntls:\n  enabled: false\n  certSecret: ''\n  publicCrt: public.crt\n  privateKey: private.key\npersistence:\n  enabled: true\n  existingClaim: ''\n  storageClass: ''\n  VolumeName: ''\n  accessMode: ReadWriteOnce\n  size: 500Gi\n  subPath: ''\nservice:\n  type: ClusterIP\n  clusterIP: null\n  port: 9000\n  nodePort: 32000\n  externalIPs: []\n  annotations: {}\nimagePullSecrets: []\ningress:\n  enabled: false\n  labels: {}\n  annotations: {}\n  path: /\n  hosts:\n    - chart-example.local\n  tls: []\nnodeSelector: {}\ntolerations: []\naffinity: {}\nsecurityContext:\n  enabled: true\n  runAsUser: 1000\n  runAsGroup: 1000\n  fsGroup: 1000\npodAnnotations: {}\npodLabels: {}\nlivenessProbe:\n  initialDelaySeconds: 5\n  periodSeconds: 5\n  timeoutSeconds: 1\n  successThreshold: 1\n  failureThreshold: 1\nreadinessProbe:\n  initialDelaySeconds: 30\n  periodSeconds: 5\n  timeoutSeconds: 6\n  successThreshold: 1\n  failureThreshold: 3\nresources:\n  requests:\n    memory: 4Gi\ndefaultBucket:\n  enabled: false\n  name: bucket\n  policy: none\n  purge: false\nbuckets: []\nmakeBucketJob:\n  annotations: null\nupdatePrometheusJob:\n  annotations: null\ns3gateway:\n  enabled: false\n  replicas: 4\n  serviceEndpoint: ''\n  accessKey: ''\n  secretKey: ''\nazuregateway:\n  enabled: false\n  replicas: 4\ngcsgateway:\n  enabled: false\n  replicas: 4\n  gcsKeyJson: ''\n  projectId: ''\nossgateway:\n  enabled: false\n  replicas: 4\n  endpointURL: ''\nnasgateway:\n  enabled: false\n  replicas: 4\n  pv: null\nb2gateway:\n  enabled: false\n  replicas: 4\nenvironment:\n  MINIO_API_READY_DEADLINE: 5s\nnetworkPolicy:\n  enabled: false\n  allowExternal: true\npodDisruptionBudget:\n  enabled: false\n  maxUnavailable: 1\nserviceAccount:\n  create: true\n  name: null\nmetrics:\n  serviceMonitor:\n    enabled: false\n    additionalLabels: {}\netcd:\n  endpoints: []\n  pathPrefix: ''\n  corednsPathPrefix: ''\n  clientCert: ''\n  clientCertKey: ''\n"
  - 应用商店
  - 从应用商店部署Minio
  - CRITICAL
  - created

- - 10
  - MySQL Exporter
  - "replicaCount: 1\nimage:\n  repository: prom/mysqld-exporter\n  tag: v0.11.0\n  pullPolicy: IfNotPresent\nservice:\n  name: mysql-exporter\n  type: ClusterIP\n  externalPort: 9104\n  internalPort: 9104\nserviceMonitor:\n  enabled: true\n  additionalLabels:\n    app.kubernetes.io/vendor: kubesphere\n  jobLabel: ''\n  targetLabels: []\n  podTargetLabels: []\nresources: {}\nnodeSelector: {}\ntolerations: []\naffinity: {}\npodLabels: {}\nannotations:\n  prometheus.io/scrape: 'true'\n  prometheus.io/path: /metrics\n  prometheus.io/port: '9104'\ncollectors: {}\nmysql:\n  db: ''\n  host: localhost\n  param: ''\n  pass: password\n  port: 3306\n  protocol: ''\n  user: exporter\n  existingSecret: false\ncloudsqlproxy:\n  enabled: false\n  image:\n    repo: gcr.io/cloudsql-docker/gce-proxy\n    tag: '1.14'\n    pullPolicy: IfNotPresent\n  instanceConnectionName: 'project:us-central1:dbname'\n  port: '3306'\n  credentials: >-\n    { \"type\": \"service_account\", \"project_id\": \"project\", \"private_key_id\":\n    \"KEYID1\", \"private_key\": \"-----BEGIN PRIVATE KEY-----\\sdajsdnasd\\n-----END\n    PRIVATE KEY-----\\n\", \"client_email\": \"user@project.iam.gserviceaccount.com\",\n    \"client_id\": \"111111111\", \"auth_uri\":\n    \"https://accounts.google.com/o/oauth2/auth\", \"token_uri\":\n    \"https://accounts.google.com/o/oauth2/token\", \"auth_provider_x509_cert_url\":\n    \"https://www.googleapis.com/oauth2/v1/certs\", \"client_x509_cert_url\":\n    \"https://www.googleapis.com/robot/v1/metadata/x509/user%40project.iam.gserviceaccount.com\"\n    }\n"
  - 应用商店
  - 从应用商店部署mysql exporter
  - CRITICAL
  - created

- - 11
  - Tomcat
  - "replicaCount: 1\nimage:\n  webarchive:\n    repository: ananwaresystems/webarchive\n    tag: '1.0'\n  tomcat:\n    repository: tomcat\n    tag: 8.5.41-alpine\n  pullPolicy: IfNotPresent\n  pullSecrets: []\ndeploy:\n  directory: /usr/local/tomcat/webapps\nservice:\n  name: http\n  type: ClusterIP\n  externalPort: 80\n  internalPort: 8080\ningress:\n  enabled: false\n  annotations: {}\n  path: /\n  hosts:\n    - chart-example.local\n  tls: []\nenv: []\nextraVolumes: []\nextraVolumeMounts: []\nextraInitContainers: []\nreadinessProbe:\n  path: /sample\n  initialDelaySeconds: 60\n  periodSeconds: 30\n  failureThreshold: 6\n  timeoutSeconds: 5\nlivenessProbe:\n  path: /sample\n  initialDelaySeconds: 60\n  periodSeconds: 30\n  failureThreshold: 6\n  timeoutSeconds: 5\nresources: {}\nnodeSelector: {}\ntolerations: []\naffinity: {}\n"
  - 应用商店
  - 从应用商店部署tomcat
  - CRITICAL
  - created

- - 12
  - etcd
  - "image:\n  repository: kubesphere/etcd\n  pullPolicy: IfNotPresent\nimagePullSecrets: []\nnameOverride: ''\nfullnameOverride: ''\npersistence:\n  size: 5Gi\nextraArgs: []\nservice:\n  port: 2379\nresources: {}\nnodeSelector: {}\ntolerations: []\naffinity: {}\ntests:\n  enabled: false\n"
  - 应用商店
  - 从应用商店部署etcd
  - CRITICAL
  - created

- - 13
  - MySQL
  - "image: mysql\nimageTag: 5.7.30\nstrategy:\n  type: Recreate\nbusybox:\n  image: busybox\n  tag: '1.32'\ntestFramework:\n  enabled: true\n  image: bats/bats\n  tag: 1.2.1\n  imagePullPolicy: IfNotPresent\n  securityContext: {}\nimagePullPolicy: IfNotPresent\nargs: []\nextraVolumes: |\n  # - name: extras\n  #   emptyDir: {}\nextraVolumeMounts: |\n  # - name: extras\n  #   mountPath: /usr/share/extras\n  #   readOnly: true\nextraInitContainers: |\n  # - name: do-something\n  #   image: busybox\n  #   command: ['do', 'something']\nnodeSelector: {}\naffinity: {}\ntolerations: []\nlivenessProbe:\n  initialDelaySeconds: 30\n  periodSeconds: 10\n  timeoutSeconds: 5\n  successThreshold: 1\n  failureThreshold: 3\nreadinessProbe:\n  initialDelaySeconds: 5\n  periodSeconds: 10\n  timeoutSeconds: 1\n  successThreshold: 1\n  failureThreshold: 3\npersistence:\n  enabled: true\n  accessMode: ReadWriteOnce\n  size: 8Gi\n  annotations: {}\nsecurityContext:\n  enabled: false\n  runAsUser: 999\n  fsGroup: 999\nresources:\n  requests:\n    memory: 256Mi\n    cpu: 100m\nconfigurationFilesPath: /etc/mysql/conf.d/\nconfigurationFiles: {}\ninitializationFiles: {}\nmetrics:\n  enabled: false\n  image: prom/mysqld-exporter\n  imageTag: v0.10.0\n  imagePullPolicy: IfNotPresent\n  resources: {}\n  annotations: {}\n  livenessProbe:\n    initialDelaySeconds: 15\n    timeoutSeconds: 5\n  readinessProbe:\n    initialDelaySeconds: 5\n    timeoutSeconds: 1\n  flags: []\n  serviceMonitor:\n    enabled: false\n    additionalLabels: {}\nservice:\n  annotations: {}\n  type: ClusterIP\n  port: 3306\nserviceAccount:\n  create: false\nssl:\n  enabled: false\n  secret: mysql-ssl-certs\n  certificates: null\ndeploymentAnnotations: {}\npodAnnotations: {}\npodLabels: {}\ninitContainer:\n  resources:\n    requests:\n      memory: 10Mi\n      cpu: 10m\n"
  - 应用商店
  - '从应用商店部署mysql '
  - CRITICAL
  - created

- - 14
  - Redis Exporter
  - "rbac:\n  create: true\n  pspEnabled: true\nserviceAccount:\n  create: true\n  name: null\nreplicaCount: 1\nimage:\n  repository: oliver006/redis_exporter\n  tag: v1.3.4\n  pullPolicy: IfNotPresent\nextraArgs: {}\nenv: {}\nservice:\n  type: ClusterIP\n  port: 9121\n  annotations: {}\n  labels: {}\nresources: {}\nnodeSelector: {}\ntolerations: []\naffinity: {}\nredisAddress: 'redis://myredis:6379'\nannotations: {}\nserviceMonitor:\n  enabled: true\n  labels:\n    app.kubernetes.io/vendor: kubesphere\nprometheusRule:\n  enabled: false\n  additionalLabels: {}\n  namespace: ''\n  rules: []\nauth:\n  enabled: false\n  secret:\n    name: ''\n    key: ''\n  redisPassword: ''\n"
  - 应用商店
  - 从应用商店部署redis exporter
  - CRITICAL
  - created

- - 15
  - APISIX
  - "replicaCount: 1\nimage:\n  repository: apache/apisix\n  pullPolicy: IfNotPresent\n  tag: 1.5-alpine\nimagePullSecrets: []\nnameOverride: ''\nfullnameOverride: ''\npodAnnotations: {}\npodSecurityContext: {}\nsecurityContext: {}\ngateway:\n  k8s_domain: cluster.local\n  type: NodePort\n  http:\n    enabled: true\n    servicePort: 80\n    containerPort: 9080\n  tls:\n    enabled: false\n    servicePort: 443\n    containerPort: 9443\n    http2:\n      enabled: true\n  ingress:\n    enabled: false\n    annotations: null\n    hosts:\n      - host: apisix.local\n        paths: []\n    tls: []\netcd:\n  prefix: /apisix\n  timeout: 3\n  port: 2379\n  enabled: true\n  resources:\n    limits: null\n    requests:\n      cpu: 100m\n      memory: 128Mi\ndns:\n  validity: 30\n  timeout: 5\nadmin:\n  enabled: true\n  cors: true\n  credentials:\n    admin: edd1c9f034335f136f87ad84b625c8f1\n    viewer: 4054f7cf07e344346cd3f287985e76a2\nplugins:\n  - example-plugin\n  - limit-req\n  - limit-count\n  - limit-conn\n  - key-auth\n  - basic-auth\n  - prometheus\n  - node-status\n  - jwt-auth\n  - zipkin\n  - ip-restriction\n  - grpc-transcode\n  - serverless-pre-function\n  - serverless-post-function\n  - openid-connect\n  - proxy-rewrite\n  - redirect\n  - response-rewrite\n  - fault-injection\n  - udp-logger\n  - wolf-rbac\n  - proxy-cache\n  - tcp-logger\n  - proxy-mirror\n  - kafka-logger\n  - cors\nstream_plugins:\n  - mqtt-proxy\nresources:\n  limits: null\n  requests:\n    cpu: 50m\nautoscaling:\n  enabled: false\n  minReplicas: 1\n  maxReplicas: 100\n  targetCPUUtilizationPercentage: 80\n  targetMemoryUtilizationPercentage: 80\nnodeSelector: {}\ntolerations: []\naffinity: {}\ntests:\n  enabled: false\n"
  - 应用商店
  - 从应用商店部署apisix
  - CRITICAL
  - created

- - 16
  - NGINX
  - "replicaCount: 1\nimage:\n  html: {}\n  nginx:\n    repository: nginx\n    pullPolicy: IfNotPresent\nnameOverride: ''\nfullnameOverride: ''\nservice:\n  name: http\n  type: ClusterIP\n  port: 80\ningress:\n  enabled: false\n  annotations: {}\n  paths:\n    - /\n  hosts:\n    - nginx.local\n  tls: []\nextraVolumes: []\nextraVolumeMounts: []\nextraInitContainers: []\nreadinessProbe:\n  path: /\n  initialDelaySeconds: 5\n  periodSeconds: 3\n  failureThreshold: 6\nlivenessProbe:\n  path: /\n  initialDelaySeconds: 5\n  periodSeconds: 3\nresources: {}\nconfigurationFile: {}\nextraConfigurationFiles: {}\nnodeSelector: {}\ntolerations: []\naffinity: {}\ntests:\n  enabled: false\n"
  - 应用商店
  - 从应用商店部署NGINX
  - CRITICAL
  - created

- - 17
  - crane
  - "craned:\n  image:\n    repository: docker.io/gocrane/craned\n    pullPolicy: IfNotPresent\n    tag: v0.5.1\n  replicaCount: 1\n  containerArgs:\n    feature-gates: 'Analysis=true,TimeSeriesPrediction=true,Autoscaling=true'\n    v: 2\n  podAnnotations: {}\n  resources: {}\n  nodeSelector: {}\n  tolerations: []\n  affinity: {}\ncranedDashboard:\n  image:\n    repository: docker.io/gocrane/dashboard\n    pullPolicy: IfNotPresent\nscheduler:\n  enable: true\n  name: crane-scheduler\n  image:\n    repository: docker.io/gocrane/crane-scheduler\n    tag: 0.0.23\n  replicaCount: 1\ncontroller:\n  enable: true\n  name: crane-scheduler-controller\n  image:\n    repository: docker.io/gocrane/crane-scheduler-controller\n    tag: 0.1.23\n  replicaCount: 1\nglobal:\n  prometheusAddr: 'http://prometheus-k8s.kubesphere-monitoring-system.svc.cluster.local:9090'\n"
  - 应用商店
  - 从应用商店部署CRANE
  - CRITICAL
  - created

- - 18
  - meshery
  - "replicaCount: 1\nrestartPolicy: Always\nimage:\n  repository: layer5/meshery\n  tag: stable-latest\n  pullPolicy: Always\nenv:\n  EVENT: mesheryLocal\n  SAAS_BASE_URL: 'https://meshery.layer5.io'\n  PROVIDER_BASE_URLS: 'https://meshery.layer5.io'\n  ADAPTER_URLS: >-\n    meshery-istio:10000 meshery-linkerd:10001 meshery-consul:10002\n    meshery-kuma:10007 meshery-osm:10009 meshery-nginx-sm:10010\n    meshery-nsm:10004 meshery-app-mesh:10005 meshery-traefik-mesh:10006\n    meshery-cpx:10008 meshery-perf:10013\nprobe:\n  livenessProbe:\n    enabled: false\n  readinessProbe:\n    enabled: false\nimagePullSecrets: []\nnameOverride: ''\nfullnameOverride: ''\nrbac:\n  nodes: false\nserviceAccount:\n  name: meshery-server\npodSecurityContext: {}\nannotations: {}\nsecurityContext: {}\nservice:\n  type: LoadBalancer\n  port: 9081\n  target_port: 8080\n  annotations: {}\ningress:\n  enabled: false\n  annotations: {}\n  hosts:\n    - host: chart-example.local\n      paths: []\n  tls: []\nresources: {}\nnodeSelector: {}\ntolerations: []\naffinity: {}\nmeshery-app-mesh:\n  enabled: true\n  fullnameOverride: meshery-app-mesh\n  serviceAccountNameOverride: meshery-server\nmeshery-istio:\n  enabled: true\n  fullnameOverride: meshery-istio\n  serviceAccountNameOverride: meshery-server\nmeshery-linkerd:\n  enabled: true\n  fullnameOverride: meshery-linkerd\n  serviceAccountNameOverride: meshery-server\nmeshery-consul:\n  enabled: true\n  fullnameOverride: meshery-consul\n  serviceAccountNameOverride: meshery-server\nmeshery-kuma:\n  enabled: true\n  fullnameOverride: meshery-kuma\n  serviceAccountNameOverride: meshery-server\nmeshery-osm:\n  enabled: true\n  fullnameOverride: meshery-osm\n  serviceAccountNameOverride: meshery-server\nmeshery-nsm:\n  enabled: true\n  fullnameOverride: meshery-nsm\n  serviceAccountNameOverride: meshery-server\nmeshery-nginx-sm:\n  enabled: true\n  fullnameOverride: meshery-nginx-sm\n  serviceAccountNameOverride: meshery-server\nmeshery-traefik-mesh:\n  enabled: true\n  fullnameOverride: meshery-traefik-mesh\n  serviceAccountNameOverride: meshery-server\nmeshery-cpx:\n  enabled: true\n  fullnameOverride: meshery-cpx\n  serviceAccountNameOverride: meshery-server\nmeshery-operator:\n  enabled: true\n  fullnameOverride: meshery-operator\nmeshery-cilium:\n  enabled: false\n  fullnameOverride: meshery-cilium\nmeshery-perf:\n  enabled: false\n  fullnameOverride: meshery-perf\n  serviceAccountNameOverride: meshery-server\ntestCase:\n  enabled: false\nmesherygateway:\n  enabled: false\n  selector:\n    istio: ingressgateway\n"
  - 应用商店
  - 从应用商店部署meshery
  - CRITICAL
  - created

- - 19
  - jh-gitlab
  - "global:\n  common:\n    labels: {}\n  image: {}\n  pod:\n    labels: {}\n  edition: ee\n  application:\n    create: false\n    links: []\n    allowClusterRoles: true\n  hosts:\n    domain: example.com\n    hostSuffix: null\n    https: true\n    externalIP: null\n    ssh: null\n    gitlab: {}\n    minio: {}\n    registry: {}\n    tls: {}\n    smartcard: {}\n    kas: {}\n    pages: {}\n  ingress:\n    apiVersion: ''\n    configureCertmanager: true\n    provider: nginx\n    annotations: {}\n    enabled: true\n    tls: {}\n    path: /\n    pathType: Prefix\n  gitlab:\n    license: {}\n  initialRootPassword: {}\n  psql:\n    connectTimeout: null\n    keepalives: null\n    keepalivesIdle: null\n    keepalivesInterval: null\n    keepalivesCount: null\n    tcpUserTimeout: null\n    password: {}\n  redis:\n    password:\n      enabled: true\n  gitaly:\n    enabled: true\n    authToken: {}\n    internal:\n      names:\n        - default\n    external: []\n    service:\n      name: gitaly\n      type: ClusterIP\n      externalPort: 8075\n      internalPort: 8075\n      tls:\n        externalPort: 8076\n        internalPort: 8076\n    tls:\n      enabled: false\n  praefect:\n    enabled: false\n    replaceInternalGitaly: true\n    authToken: {}\n    autoMigrate: true\n    dbSecret: {}\n    virtualStorages:\n      - name: default\n        gitalyReplicas: 3\n        maxUnavailable: 1\n    psql:\n      sslMode: disable\n    service:\n      name: praefect\n      type: ClusterIP\n      externalPort: 8075\n      internalPort: 8075\n      tls:\n        externalPort: 8076\n        internalPort: 8076\n    tls:\n      enabled: false\n  minio:\n    enabled: true\n    credentials: {}\n  grafana:\n    enabled: false\n  appConfig:\n    enableUsagePing: true\n    enableSeatLink: true\n    enableImpersonation: null\n    applicationSettingsCacheSeconds: 60\n    defaultCanCreateGroup: true\n    usernameChangingEnabled: true\n    issueClosingPattern: null\n    defaultTheme: null\n    defaultProjectsFeatures:\n      issues: true\n      mergeRequests: true\n      wiki: true\n      snippets: true\n      builds: true\n    webhookTimeout: null\n    maxRequestDurationSeconds: null\n    cron_jobs: {}\n    contentSecurityPolicy:\n      enabled: false\n      report_only: true\n    gravatar:\n      plainUrl: null\n      sslUrl: null\n    extra:\n      googleAnalyticsId: null\n      matomoUrl: null\n      matomoSiteId: null\n      matomoDisableCookies: null\n      oneTrustId: null\n      googleTagManagerNonceId: null\n    object_store:\n      enabled: false\n      proxy_download: true\n      storage_options: {}\n      connection: {}\n    lfs:\n      enabled: true\n      proxy_download: true\n      bucket: git-lfs\n      connection: {}\n    artifacts:\n      enabled: true\n      proxy_download: true\n      bucket: gitlab-artifacts\n      connection: {}\n    uploads:\n      enabled: true\n      proxy_download: true\n      bucket: gitlab-uploads\n      connection: {}\n    packages:\n      enabled: true\n      proxy_download: true\n      bucket: gitlab-packages\n      connection: {}\n    externalDiffs:\n      enabled: false\n      when: null\n      proxy_download: true\n      bucket: gitlab-mr-diffs\n      connection: {}\n    terraformState:\n      enabled: false\n      bucket: gitlab-terraform-state\n      connection: {}\n    dependencyProxy:\n      enabled: false\n      proxy_download: true\n      bucket: gitlab-dependency-proxy\n      connection: {}\n    pseudonymizer:\n      configMap: null\n      bucket: gitlab-pseudo\n      connection: {}\n    backups:\n      bucket: gitlab-backups\n      tmpBucket: tmp\n    incomingEmail:\n      enabled: false\n      address: ''\n      host: imap.gmail.com\n      port: 993\n      ssl: true\n      startTls: false\n      user: ''\n      password:\n        secret: ''\n        key: password\n      expungeDeleted: false\n      logger:\n        logPath: /dev/stdout\n      mailbox: inbox\n      idleTimeout: 60\n      inboxMethod: imap\n      clientSecret:\n        key: secret\n      pollInterval: 60\n      deliveryMethod: sidekiq\n      authToken: {}\n    serviceDeskEmail:\n      enabled: false\n      address: ''\n      host: imap.gmail.com\n      port: 993\n      ssl: true\n      startTls: false\n      user: ''\n      password:\n        secret: ''\n        key: password\n      expungeDeleted: false\n      logger:\n        logPath: /dev/stdout\n      mailbox: inbox\n      idleTimeout: 60\n      inboxMethod: imap\n      clientSecret:\n        key: secret\n      pollInterval: 60\n      deliveryMethod: sidekiq\n      authToken: {}\n    ldap:\n      preventSignin: false\n      servers: {}\n    gitlab_kas: {}\n    omniauth:\n      enabled: false\n      autoSignInWithProvider: null\n      syncProfileFromProvider: []\n      syncProfileAttributes:\n        - email\n      allowSingleSignOn:\n        - saml\n      blockAutoCreatedUsers: true\n      autoLinkLdapUser: false\n      autoLinkSamlUser: false\n      autoLinkUser: []\n      externalProviders: []\n      allowBypassTwoFactor: []\n      providers: []\n    sentry:\n      enabled: false\n      dsn: null\n      clientside_dsn: null\n      environment: null\n    smartcard:\n      enabled: false\n      CASecret: null\n      clientCertificateRequiredHost: null\n      sanExtensions: false\n      requiredForGitAccess: false\n    sidekiq:\n      routingRules: []\n    initialDefaults: {}\n  oauth:\n    gitlab-pages: {}\n  geo:\n    enabled: false\n    role: primary\n    nodeName: null\n    psql:\n      password: {}\n    registry:\n      replication:\n        enabled: false\n        primaryApiUrl: null\n  kas:\n    enabled: false\n    service:\n      apiExternalPort: 8153\n  shell:\n    authToken: {}\n    hostKeys: {}\n    tcp:\n      proxyProtocol: false\n  railsSecrets: {}\n  rails:\n    bootsnap:\n      enabled: true\n  registry:\n    bucket: registry\n    certificate: {}\n    httpSecret: {}\n    notificationSecret: {}\n    notifications: {}\n  pages:\n    enabled: false\n    accessControl: false\n    path: null\n    host: null\n    port: null\n    https: null\n    externalHttp: []\n    externalHttps: []\n    artifactsServer: true\n    localStore:\n      enabled: false\n    objectStore:\n      enabled: true\n      bucket: gitlab-pages\n      connection: {}\n    apiSecret: {}\n    authSecret: {}\n  runner:\n    registrationToken: {}\n  smtp:\n    enabled: false\n    address: smtp.mailgun.org\n    port: 2525\n    user_name: ''\n    password:\n      secret: ''\n      key: password\n    authentication: plain\n    starttls_auto: false\n    openssl_verify_mode: peer\n    pool: false\n  email:\n    from: ''\n    display_name: GitLab\n    reply_to: ''\n    subject_suffix: ''\n    smime:\n      enabled: false\n      secretName: ''\n      keyName: tls.key\n      certName: tls.crt\n  time_zone: UTC\n  service:\n    labels: {}\n    annotations: {}\n  deployment:\n    annotations: {}\n  antiAffinity: soft\n  affinity:\n    podAntiAffinity:\n      topologyKey: kubernetes.io/hostname\n  workhorse:\n    serviceName: webservice-default\n  webservice:\n    workerTimeout: 60\n  certificates:\n    image:\n      repository: registry.jihulab.com/gitlab-cn/build/cng-images/alpine-certificates\n      tag: 20191127-r2\n    customCAs: []\n  kubectl:\n    image:\n      repository: registry.jihulab.com/gitlab-cn/build/cng-images/kubectl\n      tag: 1.16.15\n    securityContext:\n      runAsUser: 65534\n      fsGroup: 65534\n  busybox:\n    image:\n      repository: registry.jihulab.com/gitlab-cn/cloud-native/mirror/images/busybox\n      tag: latest\n  serviceAccount:\n    enabled: false\n    create: true\n    annotations: {}\n  tracing:\n    connection:\n      string: ''\n    urlTemplate: ''\n  extraEnv: {}\nupgradeCheck:\n  enabled: true\n  image: {}\n  securityContext:\n    runAsUser: 65534\n    fsGroup: 65534\n  tolerations: []\n  resources:\n    requests:\n      cpu: 50m\ncertmanager:\n  installCRDs: true\n  nameOverride: certmanager\n  install: true\n  rbac:\n    create: true\nnginx-ingress:\n  enabled: true\n  tcpExternalConfig: 'true'\n  controller:\n    addHeaders:\n      Referrer-Policy: strict-origin-when-cross-origin\n    config:\n      hsts: 'true'\n      hsts-include-subdomains: 'false'\n      hsts-max-age: '63072000'\n      server-name-hash-bucket-size: '256'\n      use-http2: 'true'\n      ssl-ciphers: >-\n        ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4\n      ssl-protocols: TLSv1.3 TLSv1.2\n      server-tokens: 'false'\n    service:\n      externalTrafficPolicy: Local\n    ingressClassByName: false\n    ingressClassResource:\n      name: '{{ include \"ingress.class.name\" $ }}'\n    resources:\n      requests:\n        cpu: 100m\n        memory: 100Mi\n    publishService:\n      enabled: true\n    replicaCount: 2\n    minAvailable: 1\n    scope:\n      enabled: true\n    metrics:\n      enabled: true\n      service:\n        annotations:\n          gitlab.com/prometheus_scrape: 'true'\n          gitlab.com/prometheus_port: '10254'\n          prometheus.io/scrape: 'true'\n          prometheus.io/port: '10254'\n    admissionWebhooks:\n      enabled: false\n  defaultBackend:\n    enabled: true\n    minAvailable: 1\n    replicaCount: 1\n    resources:\n      requests:\n        cpu: 5m\n        memory: 5Mi\n  rbac:\n    create: true\n    scope: false\n  serviceAccount:\n    create: true\nprometheus:\n  install: true\n  rbac:\n    create: true\n  alertmanager:\n    enabled: false\n  alertmanagerFiles:\n    alertmanager.yml: {}\n  kubeStateMetrics:\n    enabled: false\n  nodeExporter:\n    enabled: false\n  pushgateway:\n    enabled: false\n  server:\n    retention: 15d\n    strategy:\n      type: Recreate\n  serverFiles:\n    prometheus.yml:\n      scrape_configs:\n        - job_name: prometheus\n          static_configs:\n            - targets:\n                - 'localhost:9090'\n        - job_name: kubernetes-apiservers\n          kubernetes_sd_configs:\n            - role: endpoints\n          scheme: https\n          tls_config:\n            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n            insecure_skip_verify: true\n          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n          relabel_configs:\n            - source_labels:\n                - __meta_kubernetes_namespace\n                - __meta_kubernetes_service_name\n                - __meta_kubernetes_endpoint_port_name\n              action: keep\n              regex: default;kubernetes;https\n        - job_name: kubernetes-pods\n          kubernetes_sd_configs:\n            - role: pod\n          relabel_configs:\n            - source_labels:\n                - __meta_kubernetes_pod_annotation_gitlab_com_prometheus_scrape\n              action: keep\n              regex: true\n            - source_labels:\n                - __meta_kubernetes_pod_annotation_gitlab_com_prometheus_path\n              action: replace\n              target_label: __metrics_path__\n              regex: (.+)\n            - source_labels:\n                - __address__\n                - __meta_kubernetes_pod_annotation_gitlab_com_prometheus_port\n              action: replace\n              regex: '([^:]+)(?::\\d+)?;(\\d+)'\n              replacement: '$1:$2'\n              target_label: __address__\n            - action: labelmap\n              regex: __meta_kubernetes_pod_label_(.+)\n            - source_labels:\n                - __meta_kubernetes_namespace\n              action: replace\n              target_label: kubernetes_namespace\n            - source_labels:\n                - __meta_kubernetes_pod_name\n              action: replace\n              target_label: kubernetes_pod_name\n        - job_name: kubernetes-service-endpoints\n          kubernetes_sd_configs:\n            - role: endpoints\n          relabel_configs:\n            - action: keep\n              regex: true\n              source_labels:\n                - >-\n                  __meta_kubernetes_service_annotation_gitlab_com_prometheus_scrape\n            - action: replace\n              regex: (https?)\n              source_labels:\n                - >-\n                  __meta_kubernetes_service_annotation_gitlab_com_prometheus_scheme\n              target_label: __scheme__\n            - action: replace\n              regex: (.+)\n              source_labels:\n                - >-\n                  __meta_kubernetes_service_annotation_gitlab_com_prometheus_path\n              target_label: __metrics_path__\n            - action: replace\n              regex: '([^:]+)(?::\\d+)?;(\\d+)'\n              replacement: '$1:$2'\n              source_labels:\n                - __address__\n                - >-\n                  __meta_kubernetes_service_annotation_gitlab_com_prometheus_port\n              target_label: __address__\n            - action: labelmap\n              regex: __meta_kubernetes_service_label_(.+)\n            - action: replace\n              source_labels:\n                - __meta_kubernetes_namespace\n              target_label: kubernetes_namespace\n            - action: replace\n              source_labels:\n                - __meta_kubernetes_service_name\n              target_label: kubernetes_name\n            - action: replace\n              source_labels:\n                - __meta_kubernetes_pod_node_name\n              target_label: kubernetes_node\n        - job_name: kubernetes-services\n          metrics_path: /probe\n          params:\n            module:\n              - http_2xx\n          kubernetes_sd_configs:\n            - role: service\n          relabel_configs:\n            - source_labels:\n                - >-\n                  __meta_kubernetes_service_annotation_gitlab_com_prometheus_probe\n              action: keep\n              regex: true\n            - source_labels:\n                - __address__\n              target_label: __param_target\n            - target_label: __address__\n              replacement: blackbox\n            - source_labels:\n                - __param_target\n              target_label: instance\n            - action: labelmap\n              regex: __meta_kubernetes_service_label_(.+)\n            - source_labels:\n                - __meta_kubernetes_namespace\n              target_label: kubernetes_namespace\n            - source_labels:\n                - __meta_kubernetes_service_name\n              target_label: kubernetes_name\nredis:\n  install: true\n  existingSecret: gitlab-redis-secret\n  existingSecretKey: redis-password\n  usePasswordFile: true\n  cluster:\n    enabled: false\n  metrics:\n    enabled: true\npostgresql:\n  postgresqlUsername: gitlab\n  postgresqlPostgresPassword: bogus\n  install: true\n  postgresqlDatabase: gitlabhq_production\n  image:\n    tag: 12.7.0\n  usePasswordFile: true\n  existingSecret: bogus\n  initdbScriptsConfigMap: bogus\n  master:\n    extraVolumeMounts:\n      - name: custom-init-scripts\n        mountPath: /docker-entrypoint-preinitdb.d/init_revision.sh\n        subPath: init_revision.sh\n    podAnnotations:\n      postgresql.gitlab/init-revision: '1'\n  metrics:\n    enabled: true\nshared-secrets:\n  enabled: true\n  rbac:\n    create: true\n  selfsign:\n    image:\n      repository: registry.jihulab.com/gitlab-cn/build/cng-images/cfssl-self-sign\n      tag: 1.2\n    keyAlgorithm: rsa\n    keySize: '4096'\n    expiry: 3650d\n    caSubject: GitLab Helm Chart\n  env: production\n  serviceAccount:\n    enabled: true\n    create: true\n    name: null\n  resources:\n    requests:\n      cpu: 50m\n  securityContext:\n    runAsUser: 65534\n    fsGroup: 65534\n  tolerations: []\n  podLabels: {}\n  annotations: {}\ngitlab-runner:\n  install: true\n  rbac:\n    create: true\n  runners:\n    locked: false\n    config: |\n      [[runners]]\n        [runners.kubernetes]\n        image = \"ubuntu:18.04\"\n        {{- if .Values.global.minio.enabled }}\n        [runners.cache]\n          Type = \"s3\"\n          Path = \"gitlab-runner\"\n          Shared = true\n          [runners.cache.s3]\n            ServerAddress = {{ include \"gitlab-runner.cache-tpl.s3ServerAddress\" . }}\n            BucketName = \"runner-cache\"\n            BucketLocation = \"us-east-1\"\n            Insecure = false\n        {{ end }}\n  podAnnotations:\n    gitlab.com/prometheus_scrape: 'true'\n    gitlab.com/prometheus_port: 9252\ngrafana:\n  nameOverride: grafana-app\n  admin:\n    existingSecret: bogus\n  env:\n    GF_SECURITY_ADMIN_USER: bogus\n    GF_SECURITY_ADMIN_PASSWORD: bogus\n  command:\n    - sh\n    - '-x'\n    - /tmp/scripts/import-secret.sh\n  sidecar:\n    dashboards:\n      enabled: true\n      label: gitlab_grafana_dashboard\n    datasources:\n      enabled: true\n      label: gitlab_grafana_datasource\n  grafana.ini:\n    server:\n      serve_from_sub_path: true\n      root_url: 'http://localhost/-/grafana/'\n    auth:\n      login_cookie_name: gitlab_grafana_session\n  extraSecretMounts:\n    - name: initial-password\n      mountPath: /tmp/initial\n      readOnly: true\n      secretName: gitlab-grafana-initial-password\n      defaultMode: 400\n  extraConfigmapMounts:\n    - name: import-secret\n      mountPath: /tmp/scripts\n      configMap: gitlab-grafana-import-secret\n      readOnly: true\n  testFramework:\n    enabled: false\ngitlab:\n  toolbox:\n    replicas: 1\n    antiAffinityLabels:\n      matchLabels:\n        app: gitaly\n"
  - 应用商店
  - 从应用商店部署jh-gitlab
  - CRITICAL
  - created

- - 20
  - qiming-operator
  - "replicaCount: 1\nimage:\n  repository: registry.cn-shanghai.aliyuncs.com/jibudata/qiming-operator\n  pullPolicy: Always\n  tag: v2.6.0\nrestore: false\nuploadToS3: false\nselfBackup:\n  enabled: false\n  frequency: 0 */3 * * *\n  retention: 168\ncomponentImages:\n  uiImage:\n    repository: registry.cn-shanghai.aliyuncs.com/jibudata/mig-ui\n    tag: v2.6.3\n  discoveryImage:\n    repository: registry.cn-shanghai.aliyuncs.com/jibudata/mig-discovery\n    tag: v2.6.0\n  migControllerImage:\n    repository: registry.cn-shanghai.aliyuncs.com/jibudata/mig-controller\n    tag: v2.6.2\n  resticHelperImage:\n    repository: registry.cn-shanghai.aliyuncs.com/jibudata/velero-restic-restore-helper\n    tag: v1.7.0\n  veleroInstallerImage:\n    repository: registry.cn-shanghai.aliyuncs.com/jibudata/velero-installer\n    tag: v2.6.1\n  hookRunnerImage:\n    repository: registry.cn-shanghai.aliyuncs.com/jibudata/hook-runner\n    tag: latest\n  cron:\n    repository: registry.cn-shanghai.aliyuncs.com/jibudata/cron\n    tag: v2.6.0\n  helmTool:\n    repository: registry.cn-shanghai.aliyuncs.com/jibudata/helm-tool\n    tag: v2.6.0\n  selfRestore:\n    repository: registry.cn-shanghai.aliyuncs.com/jibudata/self-restore\n    tag: v2.6.0\nimagePullSecrets: []\nnameOverride: ''\nfullnameOverride: ''\nmigconfig:\n  version: 2.6.3\n  clientName: default\n  deploymentMode: standalone\n  isAdminCluster: false\n  isUINodePortEnabled: true\n  UIadminPassword: passw0rd\n  keys: >-\n    f81b8dc8062486f3837472ce249c99805c2ec891a150fb20f4f33a1f9aa858b593154f669209af3202596e6ae9d789467a3cdf68877b0233ad5ba963562452ef977def301e7c6b3aaea8f9d00fdc32e27d7a85e4ab405fab8ad8f07c7c7aceb7ba9da53aca65a54d5f12d97cf6e63d7f37b816a2c3f805658767d79f429d9d01588fd120fc813d92e3ca76fb6fb4c4fb0937bf99f211983ab3bbd21f2945eb933b8fcb2d4c414ffd01023fc73cf3046df1b2a0038f907dcf0c9ced7ab560a90e3765104a0c48c21062f90b902241da7ae518424ec44d377ef7e39c5052bdf19824b7dc721628d888e5b13501993f5db277b7926ee6cc634258c7c3a3810a2236b3fe1160d91bacf635dac070844c77b37e5b9fbef340820aa572650884f7baf67ff644aec42f68b7f07c36ede59f8d3afd44e4aaece34b8aa497fefe49c29361257a53c17530af2446416e97c056b22a600377d7ecf7a4741bd894334a1a8acdffef417f76ad0e4600527a465681a67784f5aa2a476df832b4d1b2bce248de8bfc9f\n  amberappRegistry: registry.cn-shanghai.aliyuncs.com\n  amberappRepo: jibudata/amberapp\n  amberappTag: 0.0.6\n  amberappEnabled: true\n  amberappClusters: all\n  datamoverRegistry: registry.cn-shanghai.aliyuncs.com\n  datamoverRepo: jibudata/data-mover\n  datamoverTag: v2.6.0\n  datamoverEnabled: true\n  datamoverClusters: all\ns3Config:\n  skipped: false\n  name: default\n  provider: aws\n  accessKey: abc\n  secretKey: xyz\n  bucket: default\n  s3Url: ''\n  region: default\nvelero:\n  enabled: true\n  namespace: qiming-backend\n  image: >-\n    registry.cn-shanghai.aliyuncs.com/jibudata/velero:v1.7.0-jibu-2280867-202206231040\n  plugins: >-\n    registry.cn-shanghai.aliyuncs.com/jibudata/velero-plugin-for-aws:v1.3.0,registry.cn-shanghai.aliyuncs.com/jibudata/velero-plugin-for-csi:v0.2.0-jibu-39ad34c,registry.cn-shanghai.aliyuncs.com/jibudata/velero-plugin-ys1000:v0.3.0\n  useRestic: true\n  disableSnapshot: false\n  s3ForcePathStyle: true\nserviceAccount:\n  create: true\n  annotations: {}\n  name: ''\npodAnnotations: {}\npodSecurityContext: {}\nsecurityContext: {}\nservice:\n  name: ui-service\n  type: ClusterIP\n  port: 9000\ningress:\n  enabled: false\n  annotations: {}\n  hostname: ys1000.local\n  path: /\n  pathType: Prefix\n  tls: []\nresources:\n  limits:\n    cpu: 1000m\n    memory: 1024Mi\n  requests:\n    cpu: 100m\n    memory: 128Mi\nautoscaling:\n  enabled: false\n  minReplicas: 1\n  maxReplicas: 1\n  targetCPUUtilizationPercentage: 80\nnodeSelector: {}\ntolerations: []\naffinity: {}\n"
  - 应用商店
  - 从应用商店部署qiming-operator
  - CRITICAL
  - created

- - 21
  - easegress
  - "service:\n  nodePort: 30780\n  adminPort: 31255\nimage:\n  repository: megaease/easegress\n  tag: latest\ncluster:\n  primaryReplicas: 1\n  volumeType: emptyDir\n  nodeHostnames: null\n  secondaryReplicas: 0\n"
  - 应用商店
  - 从应用商店部署easegress
  - CRITICAL
  - created

- - 22
  - RadonDB PostgreSQL
  - "postgresqlImage:\n  registry: docker.io\n  repository: radondb/postgresql-repmgr\n  tag: 11.11.0-debian-r1\n  pullPolicy: IfNotPresent\n  debug: false\npgpoolImage:\n  registry: docker.io\n  repository: radondb/pgpool\n  tag: 4.2.2-debian-10-r1\n  pullPolicy: IfNotPresent\n  debug: false\nvolumePermissionsImage:\n  registry: docker.io\n  repository: qingcloud/qingcloud-shell\n  tag: '10'\n  pullPolicy: Always\nmetricsImage:\n  registry: docker.io\n  repository: qingcloud/postgres-exporter\n  tag: 0.9.0-debian-10-r43\n  pullPolicy: IfNotPresent\n  debug: false\nclusterDomain: cluster.local\nserviceAccount:\n  enabled: false\ncommonAnnotations: {}\ncommonLabels: {}\npostgresql:\n  labels: {}\n  podLabels: {}\n  replicaCount: 3\n  updateStrategyType: RollingUpdate\n  hostAliases: []\n  podAnnotations: {}\n  priorityClassName: ''\n  podAffinityPreset: ''\n  podAntiAffinityPreset: soft\n  nodeAffinityPreset:\n    type: ''\n    key: ''\n    values: []\n  affinity: {}\n  nodeSelector: {}\n  tolerations: []\n  securityContext:\n    enabled: true\n    fsGroup: 1001\n  containerSecurityContext:\n    enabled: true\n    runAsUser: 1001\n  customLivenessProbe: {}\n  customReadinessProbe: {}\n  customStartupProbe: {}\n  command: null\n  args: null\n  lifecycleHooks: null\n  extraEnvVars: []\n  extraEnvVarsCM: null\n  extraEnvVarsSecret: null\n  extraVolumes:\n    - name: dshm\n      emptyDir:\n        medium: Memory\n        sizeLimit: 512Mi\n  extraVolumeMounts:\n    - name: dshm\n      mountPath: /dev/shm\n  initContainers: []\n  sidecars: []\n  resources:\n    limits: {}\n    requests: {}\n  livenessProbe:\n    enabled: true\n    initialDelaySeconds: 30\n    periodSeconds: 10\n    timeoutSeconds: 5\n    successThreshold: 1\n    failureThreshold: 6\n  readinessProbe:\n    enabled: true\n    initialDelaySeconds: 5\n    periodSeconds: 10\n    timeoutSeconds: 5\n    successThreshold: 1\n    failureThreshold: 6\n  startupProbe:\n    enabled: false\n    initialDelaySeconds: 5\n    periodSeconds: 10\n    timeoutSeconds: 5\n    successThreshold: 1\n    failureThreshold: 10\n  pdb:\n    create: false\n    minAvailable: 1\n  username: postgres\n  password: Qing@123\n  upgradeRepmgrExtension: false\n  pgHbaTrustAll: false\n  syncReplication: true\n  repmgrUsername: repmgr\n  repmgrPassword: Repmgr_123\n  repmgrDatabase: repmgr\n  repmgrLogLevel: NOTICE\n  repmgrConnectTimeout: 5\n  repmgrReconnectAttempts: 3\n  repmgrReconnectInterval: 5\n  audit:\n    logHostname: true\n    logConnections: false\n    logDisconnections: false\n    pgAuditLog: ''\n    pgAuditLogCatalog: 'off'\n    clientMinMessages: error\n    logLinePrefix: ''\n    logTimezone: ''\n  sharedPreloadLibraries: 'pgaudit, repmgr'\n  maxConnections: null\n  postgresConnectionLimit: null\n  dbUserConnectionLimit: null\n  tcpKeepalivesInterval: null\n  tcpKeepalivesIdle: null\n  tcpKeepalivesCount: null\n  statementTimeout: null\n  pghbaRemoveFilters: null\n  extraInitContainers: []\n  repmgrConfiguration: ''\n  configuration: ''\n  pgHbaConfiguration: ''\n  extendedConf: ''\npgpool:\n  customUsers: {}\n  hostAliases: []\n  customUsersSecret: null\n  srCheckDatabase: postgres\n  labels: {}\n  podLabels: {}\n  serviceLabels: {}\n  customLivenessProbe: {}\n  customReadinessProbe: {}\n  customStartupProbe: {}\n  command: null\n  args: null\n  lifecycleHooks: null\n  extraEnvVars: []\n  extraEnvVarsCM: null\n  extraEnvVarsSecret: null\n  extraVolumes:\n    - name: dshm\n      emptyDir:\n        medium: Memory\n  extraVolumeMounts:\n    - name: dshm\n      mountPath: /dev/shm\n  initContainers: []\n  sidecars: []\n  replicaCount: 1\n  podAnnotations: {}\n  priorityClassName: ''\n  podAffinityPreset: ''\n  podAntiAffinityPreset: soft\n  nodeAffinityPreset:\n    type: ''\n    key: ''\n    values: []\n  affinity: {}\n  nodeSelector: {}\n  tolerations: []\n  securityContext:\n    enabled: true\n    fsGroup: 1001\n  containerSecurityContext:\n    enabled: true\n    runAsUser: 1001\n  resources:\n    limits: {}\n    requests: {}\n  livenessProbe:\n    enabled: true\n    initialDelaySeconds: 30\n    periodSeconds: 10\n    timeoutSeconds: 5\n    successThreshold: 1\n    failureThreshold: 5\n  readinessProbe:\n    enabled: true\n    initialDelaySeconds: 5\n    periodSeconds: 5\n    timeoutSeconds: 5\n    successThreshold: 1\n    failureThreshold: 5\n  startupProbe:\n    enabled: false\n    initialDelaySeconds: 5\n    periodSeconds: 10\n    timeoutSeconds: 5\n    successThreshold: 1\n    failureThreshold: 10\n  pdb:\n    create: false\n    minAvailable: 1\n  updateStrategy: {}\n  adminUsername: admin\n  adminPassword: Pgpool@123\n  logConnections: false\n  logHostname: true\n  logPerNodeStatement: false\n  logLinePrefix: null\n  clientMinMessages: error\n  numInitChildren: null\n  maxPool: null\n  childMaxConnections: null\n  childLifeTime: null\n  clientIdleLimit: null\n  connectionLifeTime: null\n  useLoadBalancing: true\n  configuration: ''\n  tls:\n    enabled: false\n    preferServerCiphers: true\n    certificatesSecret: ''\n    certFilename: ''\n    certKeyFilename: ''\n    certCAFilename: null\nldap:\n  enabled: false\n  uri: null\n  base: null\n  binddn: null\n  bindpw: null\n  bslookup: null\n  scope: null\n  tlsReqcert: null\n  nssInitgroupsIgnoreusers: 'root,nslcd'\nvolumePermissions:\n  enabled: false\n  securityContext:\n    runAsUser: 0\n  resources:\n    limits: {}\n    requests: {}\nmetrics:\n  enabled: false\n  securityContext:\n    enabled: true\n    runAsUser: 1001\n  resources:\n    limits: {}\n    requests: {}\n  livenessProbe:\n    enabled: true\n    initialDelaySeconds: 30\n    periodSeconds: 10\n    timeoutSeconds: 5\n    successThreshold: 1\n    failureThreshold: 6\n  readinessProbe:\n    enabled: true\n    initialDelaySeconds: 5\n    periodSeconds: 10\n    timeoutSeconds: 5\n    successThreshold: 1\n    failureThreshold: 6\n  startupProbe:\n    enabled: false\n    initialDelaySeconds: 5\n    periodSeconds: 10\n    timeoutSeconds: 5\n    successThreshold: 1\n    failureThreshold: 10\n  annotations:\n    prometheus.io/scrape: 'true'\n    prometheus.io/port: '9187'\n  serviceMonitor:\n    enabled: false\n    selector:\n      prometheus: kube-prometheus\n    relabelings: []\n    metricRelabelings: []\npersistence:\n  enabled: true\n  mountPath: /qingcloud/postgresql\n  accessModes:\n    - ReadWriteOnce\n  size: 8Gi\n  annotations: {}\n  selector: {}\nservice:\n  type: ClusterIP\n  port: 5432\n  externalTrafficPolicy: Cluster\n  annotations: {}\n  serviceLabels: {}\nnetworkPolicy:\n  enabled: false\n  allowExternal: true\nextraDeploy: []\n"
  - 应用商店
  - 从应用商店部署RadonDB PostgreSQL
  - CRITICAL
  - created

- - 23
  - edgemesh
  - "server:\n  image: 'kubeedge/edgemesh-server:latest'\n  nodeName: your node name\n  affinity: {}\n  tolerations: {}\n  nodeSelector: {}\n  livenessProbe:\n    initialDelaySeconds: 10\n    periodSeconds: 5\n  advertiseAddress: null\n  apiVersion: server.edgemesh.config.kubeedge.io/v1alpha1\n  kind: EdgeMeshServer\n  kubeAPIConfig:\n    burst: 200\n    contentType: application/vnd.kubernetes.protobuf\n    kubeConfig: ''\n    master: ''\n    qps: 100\n  modules:\n    tunnel:\n      enable: true\n      listenPort: 20004\n      security:\n        enable: false\n        httpServer: ''\n        tlsCaFile: /etc/kubeedge/edgemesh/server/acls/rootCA.crt\n        tlsCertFile: /etc/kubeedge/edgemesh/server/acls/server.crt\n        tlsPrivateKeyFile: /etc/kubeedge/edgemesh/server/acls/server.key\nagent:\n  image: 'kubeedge/edgemesh-agent:latest'\n  affinity: {}\n  nodeSelector: {}\n  tolerations: {}\n  livenessProbe:\n    initialDelaySeconds: 10\n    periodSeconds: 5\n  apiVersion: agent.edgemesh.config.kubeedge.io/v1alpha1\n  kind: EdgeMeshAgent\n  commonConfig:\n    dummyDeviceName: edgemesh0\n    dummyDeviceIP: 169.254.96.16\n  goChassisConfig:\n    protocol:\n      tcpBufferSize: 8192\n      tcpClientTimeout: 5\n      tcpReconnectTimes: 3\n    loadBalancer:\n      defaultLBStrategy: RoundRobin\n      supportLBStrategies:\n        - RoundRobin\n        - Random\n        - ConsistentHash\n      consistentHash:\n        partitionCount: 100\n        replicationFactor: 10\n        load: 1.25\n  modules:\n    edgeDNS:\n      listenPort: 53\n    edgeProxy:\n      enable: true\n      listenPort: 40001\n      subNet: ''\n      socks5Proxy:\n        enable: false\n        listenPort: 10800\n    tunnel:\n      enable: true\n      listenPort: 20006\n      security:\n        enable: false\n        httpServer: ''\n        tlsCaFile: /etc/kubeedge/edgemesh/agent/acls/rootCA.crt\n        tlsCertFile: /etc/kubeedge/edgemesh/agent/acls/server.crt\n        tlsPrivateKeyFile: /etc/kubeedge/edgemesh/agent/acls/server.key\n"
  - 应用商店
  - 从应用商店部署edgemesh
  - CRITICAL
  - created

- - 24
  - chaos-mesh
  - "nameOverride: ''\nfullnameOverride: ''\ncustomLabels: {}\nclusterScoped: true\nrbac:\n  create: true\ntimezone: UTC\nenableProfiling: true\nregistry: ''\ncontrollerManager:\n  hostNetwork: false\n  serviceAccount: chaos-controller-manager\n  replicaCount: 1\n  priorityClassName: ''\n  image: 'pingcap/chaos-mesh:v2.0.4'\n  imagePullPolicy: IfNotPresent\n  enableFilterNamespace: false\n  targetNamespace: chaos-testing\n  service:\n    type: ClusterIP\n  resources:\n    limits: {}\n    requests:\n      cpu: 25m\n      memory: 256Mi\n  nodeSelector: {}\n  tolerations: []\n  affinity: {}\n  podAnnotations: {}\n  allowHostNetworkTesting: false\n  podChaos:\n    podFailure:\n      pauseImage: 'gcr.io/google-containers/pause:latest'\nchaosDaemon:\n  image: 'pingcap/chaos-daemon:v2.0.4'\n  imagePullPolicy: IfNotPresent\n  grpcPort: 31767\n  httpPort: 31766\n  env: {}\n  hostNetwork: false\n  privileged: true\n  priorityClassName: ''\n  podAnnotations: {}\n  serviceAccount: chaos-daemon\n  podSecurityPolicy: false\n  runtime: docker\n  socketPath: /var/run/docker.sock\n  resources: {}\n  nodeSelector: {}\n  tolerations: []\n  affinity: {}\ndashboard:\n  create: true\n  hostNetwork: false\n  replicaCount: 1\n  priorityClassName: ''\n  serviceAccount: chaos-controller-manager\n  image: 'pingcap/chaos-dashboard:v2.0.4'\n  imagePullPolicy: IfNotPresent\n  securityMode: true\n  nodeSelector: {}\n  tolerations: []\n  affinity: {}\n  podAnnotations: {}\n  service:\n    annotations: {}\n    type: NodePort\n  resources:\n    limits: {}\n    requests:\n      cpu: 25m\n      memory: 256Mi\n  persistentVolume:\n    enabled: false\n    existingClaim: ''\n    size: 8Gi\n    storageClassName: standard\n    mountPath: /data\n    subPath: ''\n  env:\n    LISTEN_HOST: 0.0.0.0\n    LISTEN_PORT: 2333\n    DATABASE_DRIVER: sqlite3\n    DATABASE_DATASOURCE: /data/core.sqlite\n  ingress:\n    enabled: false\n    certManager: false\n    hosts:\n      - name: dashboard.local\n        paths:\n          - /\n        tls: false\n        tlsSecret: dashboard.local-tls\ndnsServer:\n  create: false\n  serviceAccount: chaos-dns-server\n  image: 'pingcap/coredns:v0.2.1'\n  imagePullPolicy: IfNotPresent\n  priorityClassName: ''\n  nodeSelector: {}\n  podAnnotations: {}\n  runtime: docker\n  name: chaos-mesh-dns-server\n  grpcPort: 9288\n  resources:\n    limits: {}\n    requests:\n      cpu: 100m\n      memory: 70Mi\n  tolerations: []\n  env:\n    LISTEN_HOST: 0.0.0.0\n    LISTEN_PORT: 53\nprometheus:\n  create: false\n  serviceAccount: prometheus\n  image: 'prom/prometheus:v2.18.1'\n  imagePullPolicy: IfNotPresent\n  priorityClassName: ''\n  nodeSelector: {}\n  tolerations: []\n  affinity: {}\n  podAnnotations: {}\n  resources:\n    limits:\n      cpu: 500m\n      memory: 1024Mi\n    requests:\n      cpu: 250m\n      memory: 512Mi\n  service:\n    type: ClusterIP\n  volume:\n    storage: 2Gi\n    storageClassName: standard\nwebhook:\n  crtPEM: ''\n  keyPEM: ''\n  certManager:\n    enabled: false\n  timeoutSeconds: 5\n  FailurePolicy: Ignore\n  CRDS:\n    - podchaos\n    - iochaos\n    - timechaos\n    - networkchaos\n    - kernelchaos\n    - stresschaos\n    - awschaos\n    - gcpchaos\n    - dnschaos\n    - jvmchaos\n    - schedule\n    - workflow\n    - httpchaos\nbpfki:\n  create: false\n  image: 'pingcap/chaos-kernel:v2.0.4'\n  imagePullPolicy: IfNotPresent\n  grpcPort: 50051\n  resources: {}\n"
  - 应用商店
  - 从应用商店部署chaos-mesh
  - CRITICAL
  - created

- - 25
  - fpga-operator
  - "coral:\n  image: inaccel/coral\n  logLevel: info\n  pullPolicy: Always\ndaemon:\n  debug: false\n  image: inaccel/daemon\n  tag: latest\ndriver:\n  enabled: true\n  image: inaccel/driver\n  tag: latest\nfpga-discovery:\n  enabled: true\n  fullnameOverride: fpga-discovery\n  image:\n    tag: v0.10.0-minimal\n  master:\n    extraLabelNs:\n      - inaccel\n    instance: fpga-discovery\n  nodeFeatureRule:\n    createCRD: false\n  worker:\n    config:\n      core:\n        sources:\n          - custom\n      sources:\n        custom:\n          - matchOn:\n              - pciId:\n                  device:\n                    - 09c4\n                    - 0b2b\n                  vendor:\n                    - '8086'\n              - pciId:\n                  vendor:\n                    - 10ee\n              - pciId:\n                  device:\n                    - '1042'\n                    - f010\n                  vendor:\n                    - 1d0f\n            name: inaccel/fpga\n            value: enabled\nkubelet: /var/lib/kubelet\nmkrt:\n  image: inaccel/mkrt\n  tag: latest\nmonitor:\n  image: inaccel/monitor\n  pullPolicy: Always\nreef:\n  debug: false\n  image: inaccel/reef\n  tag: latest\nroot:\n  config: /etc/inaccel\n  state: /var/lib/inaccel\ntests:\n  vadd:\n    image: inaccel/vadd\n    tag: latest\n"
  - 应用商店
  - 从应用商店部署fpga-operator
  - CRITICAL
  - created

- - 26
  - juicefs
  - "image:\n  repository: juicedata/juicefs-csi-driver\n  tag: v0.15.0\n  pullPolicy: ''\nsidecars:\n  livenessProbeImage:\n    repository: quay.io/k8scsi/livenessprobe\n    tag: v1.1.0\n  nodeDriverRegistrarImage:\n    repository: quay.io/k8scsi/csi-node-driver-registrar\n    tag: v1.1.0\n  csiProvisionerImage:\n    repository: quay.io/k8scsi/csi-provisioner\n    tag: v1.6.0\nhostAliases: []\nkubeletDir: /var/lib/kubelet\njfsMountDir: /var/lib/juicefs/volume\njfsConfigDir: /var/lib/juicefs/config\ndnsPolicy: ClusterFirstWithHostNet\ndnsConfig: {}\nserviceAccount:\n  controller:\n    create: true\n    annotations: {}\n    name: juicefs-csi-controller-sa\n  node:\n    create: true\n    name: juicefs-csi-node-sa\ncontroller:\n  enabled: true\n  provisioner: false\n  replicas: 1\n  resources:\n    limits:\n      cpu: 1000m\n      memory: 1Gi\n    requests:\n      cpu: 100m\n      memory: 512Mi\n  terminationGracePeriodSeconds: 30\n  affinity: {}\n  nodeSelector: {}\n  tolerations:\n    - key: CriticalAddonsOnly\n      operator: Exists\n  service:\n    port: 9909\n    trpe: ClusterIP\nnode:\n  enabled: true\n  hostNetwork: false\n  resources:\n    limits:\n      cpu: 2000m\n      memory: 5Gi\n    requests:\n      cpu: 1000m\n      memory: 1Gi\n  storageClassShareMount: false\n  terminationGracePeriodSeconds: 30\n  affinity: {}\n  nodeSelector: {}\n  tolerations:\n    - key: CriticalAddonsOnly\n      operator: Exists\nstorageClasses:\n  - name: juicefs-sc\n    enabled: true\n    reclaimPolicy: Delete\n    backend:\n      name: juice\n      metaurl: ''\n      storage: ''\n      token: ''\n      accessKey: ''\n      secretKey: ''\n      bucket: ''\n      envs: ''\n      configs: ''\n      trashDays: ''\n      formatOptions: ''\n    mountOptions: null\n    pathPattern: ''\n    mountPod:\n      resources:\n        limits:\n          cpu: 5000m\n          memory: 5Gi\n        requests:\n          cpu: 1000m\n          memory: 1Gi\n"
  - 应用商店
  - 从应用商店部署juicefs
  - CRITICAL
  - created

- - 27
  - nocalhost
  - "replicaCount: 1\napi:\n  image:\n    repository: nocalhost-docker.pkg.coding.net/nocalhost/public/nocalhost-api\n    pullPolicy: Always\n    tag: v0.6.9\nweb:\n  image:\n    repository: nocalhost-docker.pkg.coding.net/nocalhost/public/nocalhost-web\n    pullPolicy: Always\n    tag: v0.6.9\nimagePullSecrets: []\npodSecurityContext: {}\nsecurityContext: {}\nservice:\n  type: LoadBalancer\n  port: 80\nresources:\n  requests:\n    cpu: 100m\n    memory: 256Mi\nautoscaling:\n  enabled: false\n  minReplicas: 1\n  maxReplicas: 5\n  targetCPUUtilizationPercentage: 80\nnodeSelector: {}\ntolerations: []\naffinity: {}\nmariadb:\n  fullnameOverride: nocalhost-mariadb\n  commonAnnotations:\n    helm.sh/hook: pre-install\n    helm.sh/hook-weight: '1'\n  image:\n    registry: nocalhost-docker.pkg.coding.net/nocalhost/public\n    repository: mariadb\n  auth:\n    rootPassword: root\n    database: nocalhost\n  primary:\n    persistence:\n      size: 10Gi\n    resources:\n      requests:\n        memory: 256Mi\n        cpu: 100m\n    extraVolumes:\n      - name: nocalhost-api-sql-config-volume\n        configMap:\n          name: nocalhost-api-sql-init-config\n          defaultMode: 493\n    extraVolumeMounts:\n      - name: nocalhost-api-sql-config-volume\n        mountPath: /docker-entrypoint-initdb.d/\n"
  - 应用商店
  - 从应用商店部署nocalhost
  - CRITICAL
  - created